{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# todo   description                              hours progress\n",
        "# todo0: no lib python function csv parser.          ~6 COMPLETE\n",
        "# todo1: make defs from repeated code.               ~1 COMPLETE\n",
        "# todo2: def into class.                             ~1 COMPLETE\n",
        "# todo3: flip column, mean, standard deviation       ~5 PROCESSING flip @7 hours\n",
        "# todo4: kurt, skew, covar, cor, r squared, ANOVA    ~9\n",
        "# todo5: interpret results                           20\n",
        "\n",
        "import sys\n",
        "print(sys.version)\n",
        "\n",
        "# Class to open a csv and parse the values into a list\n",
        "class CSV_Parser:\n",
        "  # Initialize the input variables\n",
        "  def __init__(self, data_path, data_bool):\n",
        "    self.data_path = data_path\n",
        "    self.data_bool = data_bool\n",
        "  # Function to open file, 1 to print contents, 0 to not print\n",
        "  def file_opener(self):\n",
        "    with open(self.data_path, \"r\") as data_open:\n",
        "      data_read = data_open.read()\n",
        "      if self.data_bool == 1:\n",
        "        print(data_read)\n",
        "      return data_read\n",
        "  # Index the commas and line breaks, get column length = 1, no = 0\n",
        "  def comma_index(self, open_file):\n",
        "    data_comma_place = []\n",
        "    column_pl_len = 0\n",
        "    for i in range(len(open_file)):\n",
        "      data1_col1 = open_file[i]\n",
        "      if data1_col1 == \",\":\n",
        "        data_comma_place.append(i)\n",
        "      if data1_col1 == \"\\n\":\n",
        "        data_comma_place.append(i)\n",
        "    las_val = data_comma_place[-1] + 2\n",
        "    data_comma_place.append(las_val)\n",
        "    return data_comma_place\n",
        "  # Get the length of the column TODO avoid repeated code\n",
        "  def comma_length(self, open_file, column_len):\n",
        "    data_comma_place = []\n",
        "    column_pl_len = 0\n",
        "    for i in range(len(open_file)):\n",
        "      data1_col1 = open_file[i]\n",
        "      if data1_col1 == \",\":\n",
        "        data_comma_place.append(i)\n",
        "      if data1_col1 == \"\\n\":\n",
        "        data_comma_place.append(i)\n",
        "        # If you want to use the function to get the column length, set to 1\n",
        "        if column_len == 1:\n",
        "          data_comma_place = len(data_comma_place)\n",
        "          break\n",
        "    return data_comma_place\n",
        "  # Splitting the csv characters into list of words based on indexed comma position\n",
        "  def csv_value_list(self, data_comma_out, open_file):\n",
        "    j = 0\n",
        "    data_val_list = []\n",
        "    for k in data_comma_out:\n",
        "      data_val = open_file[j:k]\n",
        "      data_val_list.append(data_val)\n",
        "      j = k + 1\n",
        "    return data_val_list\n",
        "\n",
        "  ##############################################################################\n",
        "  # TODO CS 180 Question 0\n",
        "  # 'def csv_flipper' (below)\n",
        "  # is bad code because it assumes the ID column is in the 0 position\n",
        "  # which might be different in other CSV reducing reusability\n",
        "  # Starting the counter variable j at number of the numerical\n",
        "  # column that you want to not be flipped would be easier.\n",
        "  # The 'def column_name' function could translate the desired numerical\n",
        "  # column text into a number:\n",
        "  def column_name(self, data_val_list):\n",
        "    excluded_column_int = []\n",
        "    return excluded_column_int\n",
        "  # Then 'def csv_flipper would accept <excluded_column_int> returned from the\n",
        "  # 'def column_name' function and exclude that column from the scale flipping.\n",
        "  ##############################################################################\n",
        "\n",
        "  # Flipping the columns from high to low for readability\n",
        "  # If the original value was 5, set it to equal 0 (no pain)\n",
        "  # If the original value was 0, set it to equal to 5 (high pain) etc.\n",
        "  def csv_flipper(self, csv_list, col_num):\n",
        "    csv_flipped = []\n",
        "    j = 0\n",
        "    for m in csv_list:\n",
        "      # The j counts the position to append the id\n",
        "      # If the j or count is divisible by the number of columns\n",
        "      # (the column) is appended to the list. Otherwise the first 5 ID column\n",
        "      # would also be flipped since they are equal to the numbers\n",
        "      # The first 'if' statement excludes the \"ID\" column at position \"0\"\n",
        "      if j % col_num == 0:\n",
        "        csv_flipped.append(m)\n",
        "      elif m == str(5):\n",
        "        n = str(1)\n",
        "        csv_flipped.append(n)\n",
        "      elif m == str(4):\n",
        "        n = str(2)\n",
        "        csv_flipped.append(n)\n",
        "      elif m == str(3):\n",
        "        n = str(3)\n",
        "        csv_flipped.append(n)\n",
        "      elif m == str(2):\n",
        "        n = str(4)\n",
        "        csv_flipped.append(n)\n",
        "      elif m == str(1):\n",
        "        n = str(5)\n",
        "        csv_flipped.append(n)\n",
        "      else:\n",
        "        csv_flipped.append(m)\n",
        "      j += 1\n",
        "    return csv_flipped\n",
        "\n",
        "  # Append the unflipped stamina column to the flipped pain scale columns\n",
        "  # 0) Extract the fourth column (3) by making a list of every nth (n-1)\n",
        "  # value the length of the column (col_num)\n",
        "  def stm_extract(self, csv_list, col_num):\n",
        "    stamina_col = []\n",
        "    j = col_num - 1\n",
        "    for sta in csv_list[3:]:\n",
        "      if j == col_num - 1:\n",
        "        stamina_col.append(sta)\n",
        "        j = 0\n",
        "      else:\n",
        "        j += 1\n",
        "    return stamina_col\n",
        "\n",
        "  # TODO CS 180 Question 1: Big O Notation\n",
        "  # Does the array already exist in memory represented as binary\n",
        "  # and the loop accesses the array at index 'i'?\n",
        "  # If you remove the stamina value at index 'i' using the 'pop' method,\n",
        "  # are you keeping the same array but with the removed value?\n",
        "  # Or are you making another array which would be the same as\n",
        "  # appending all the values to a new array as in the\n",
        "  # commented function stm_remove? Time each function to test.\n",
        "\n",
        "  # 1) Remove the unnecessary flipped stamina column from the flipped list\n",
        "  '''\n",
        "  def stm_remove(self, flip_list, col_num):\n",
        "    flip_list_rm = []\n",
        "    og_col_num = col_num\n",
        "    for i in range(len(flip_list)):\n",
        "      if i == 3:\n",
        "          col_num = i + col_num\n",
        "      elif i == col_num:\n",
        "        col_num += og_col_num\n",
        "      else:\n",
        "        flip_list_rm.append(flip_list[i])\n",
        "    return flip_list_rm\n",
        "  '''\n",
        "\n",
        "  # Remove flipped stamina values from third column\n",
        "  def stm_remove(self, flip_list, col_num):\n",
        "    og_col_num = col_num\n",
        "    col_len = 32\n",
        "    j = 0\n",
        "    print(flip_list)\n",
        "    print(len(flip_list))\n",
        "    print('000000000')\n",
        "    for i in range(len(flip_list)):\n",
        "      print(i)\n",
        "      if i == 3:\n",
        "        flip_list.pop(i)\n",
        "        col_num = i + col_num\n",
        "        j = i - 1\n",
        "      elif i == col_num:\n",
        "        flip_list.pop(j)\n",
        "        col_num += og_col_num\n",
        "        j = i - 1\n",
        "    return flip_list\n",
        "\n",
        "  # TODO CS 180 Question 2\n",
        "  # 0) Write a function to get the length of the column. This will be used in the\n",
        "  # 'stm_append' function to append the unflipped stamina values from 'extract'\n",
        "  # to the output of the 'stm_remove' function containing flipped values and\n",
        "  # stamina column by extending the length of the items iterated over.\n",
        "  # Or you could use the length of the original csv list from csv_value_list\n",
        "  # as input into the stm_append.\n",
        "\n",
        "  def column_len(self):\n",
        "    col_len = 32\n",
        "    return col_len\n",
        "\n",
        "  # TODO CS 180 Question 1: Big O Notation continued\n",
        "  # Time the two variations of 'stm_append'\n",
        "  # functions to see which one is faster.\n",
        "\n",
        "  # Append unflipped stamina values to flipped list as a new column\n",
        "  '''\n",
        "  def stm_append(self, stm_rm, stamina_col, col_num):\n",
        "    flip_append_list = []\n",
        "    og_col_num = col_num\n",
        "    col_len = 32\n",
        "    j = 0\n",
        "    k = 0\n",
        "    for i in range(len(stm_rm) + col_len):\n",
        "      if i == 3:\n",
        "        flip_append_list.append(stamina_col[j])\n",
        "        col_num = i + col_num\n",
        "        j += 1\n",
        "      elif i == col_num:\n",
        "        flip_append_list.append(stamina_col[j])\n",
        "        col_num += og_col_num\n",
        "        j += 1\n",
        "      else:\n",
        "        flip_append_list.append(stm_rm[k])\n",
        "        k += 1\n",
        "    return flip_append_list\n",
        "  '''\n",
        "\n",
        "  # TODO CS 180 Question 2: Big O Notation continued\n",
        "  # Would adding 'stamina' values to the array decrease memory?\n",
        "\n",
        "  # Append unflipped stamina values to flipped list as a new column\n",
        "  def stm_append(self, stm_rm, stamina_col, col_num):\n",
        "    og_col_num = col_num\n",
        "    col_len = 32\n",
        "    j = 0\n",
        "    print(stm_rm)\n",
        "    print(len(stm_rm))\n",
        "    for i in range(len(stm_rm) + col_len):\n",
        "      if i == 3:\n",
        "        stm_rm.insert(i, stamina_col[j])\n",
        "        col_num = i + col_num\n",
        "        j += 1\n",
        "      elif i == col_num:\n",
        "        stm_rm.insert(i, stamina_col[j])\n",
        "        col_num += og_col_num\n",
        "        j += 1\n",
        "    print('bbbbbb')\n",
        "    print(stm_rm)\n",
        "    print(len(stm_rm))\n",
        "    return stm_rm\n",
        "\n",
        "# Execute the CSV_Parser\n",
        "# A list of CSV could be iterated over\n",
        "# The path of the CSV to be parsed, # do I need this functionality: 1 to print, 0 to not print.\n",
        "data1_path, data2_path, print_cont = \"/content/stamina.csv\", \"/content/food.csv\", 0\n",
        "# Create the CSV_Parser class object and open the files\n",
        "Data1_Parser, Data2_Parser = CSV_Parser(data1_path, print_cont), CSV_Parser(data2_path, print_cont)\n",
        "data1_read, data2_read = Data1_Parser.file_opener(), Data2_Parser.file_opener()\n",
        "# Index the comma position from the CSV and split the characters into their values\n",
        "data1_comma_place, data2_comma_place = Data1_Parser.comma_index(data1_read), Data2_Parser.comma_index(data2_read)\n",
        "data1_comma_list, data2_comma_list = Data1_Parser.csv_value_list(data1_comma_place, data1_read), Data2_Parser.csv_value_list(data2_comma_place, data2_read)\n",
        "# Get the length of columns of the csv\n",
        "data1_col_len, data2_col_len = Data1_Parser.comma_length(data1_read, 1), Data2_Parser.comma_length(data2_read, 1)\n",
        "# Flip the scale values from high to low for every column\n",
        "# Makes the pain scale more readable with high values meaning high pain and vice versa\n",
        "data1_flipped = Data1_Parser.csv_flipper(data1_comma_list, data1_col_len)\n",
        "# Extract the stamina column that was not flipped\n",
        "data1_stm_ext = Data1_Parser.stm_extract(data1_comma_list, data1_col_len)\n",
        "# Remove the flipped stamina column from the flipped list\n",
        "data1_stm_rm = Data1_Parser.stm_remove(data1_flipped, data1_col_len)\n",
        "# Append the extracted not flipped stamina to the flipped list\n",
        "data1_stm_ext_append = Data1_Parser.stm_append(data1_stm_rm, data1_stm_ext, data1_col_len)\n"
      ],
      "metadata": {
        "id": "IxtfVwAjhyaV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "044b9869-1d6b-46f1-d583-f9a712b8a740"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]\n",
            "['ID', 'Date', 'Day', 'Stm', 'Feet', 'Ankl', 'Caf', 'Kne', 'Qua', 'But', 'Gro', 'Abs', 'Bac', 'Lat', 'Tra', 'Sho', 'Chs', 'Tric', 'Bic', 'Nec', 'Hea', '0', '0501', '01', '2', '1', '2', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0502', '02', '4', '1', '4', '1', '4', '4', '4', '4', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '2', '0503', '03', '3', '1', '3', '1', '3', '2', '2', '2', '1', '4', '2', '4', '4', '4', '4', '1', '4', '4', '3', '0504', '04', '2', '1', '2', '1', '2', '1', '2', '1', '1', '2', '1', '2', '2', '4', '4', '1', '2', '2', '4', '0505', '05', '2', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '2', '1', '5', '0506', '06', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '6', '0507', '07', '1', '1', '2', '1', '1', '2', '2', '1', '2', '1', '1', '2', '1', '1', '1', '1', '2', '2', '7', '0508', '08', '1', '2', '1', '1', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '8', '0509', '09', '4', '2', '2', '2', '1', '1', '4', '1', '2', '2', '1', '4', '4', '2', '4', '1', '4', '2', '9', '0510', '10', '2', '1', '2', '1', '2', '2', '2', '2', '1', '1', '1', '2', '2', '1', '2', '1', '2', '1', '10', '0511', '11', '1', '1', '2', '1', '2', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '2', '1', '11', '0512', '12', '1', '1', '1', '1', '1', '1', '2', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '12', '0513', '13', '2', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '13', '0514', '14', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '14', '0515', '15', '2', '1', '1', '1', '2', '1', '2', '1', '2', '2', '2', '2', '1', '1', '1', '1', '2', '2', '15', '0516', '16', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '16', '0517', '17', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '17', '0518', '18', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '18', '0519', '19', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '19', '0520', '20', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '20', '0521', '21', '2', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '21', '0522', '22', '2', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '22', '0523', '23', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '23', '0524', '24', '2', '1', '1', '2', '1', '2', '2', '2', '4', '1', '2', '2', '1', '1', '1', '1', '4', '2', '24', '0525', '25', '2', '1', '1', '2', '1', '1', '1', '1', '2', '2', '2', '2', '4', '2', '2', '2', '2', '2', '25', '0526', '26', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '1', '2', '1', '2', '1', '26', '0527', '27', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '27', '0528', '28', '4', '1', '1', '1', '1', '2', '4', '4', '2', '2', '2', '2', '2', '1', '1', '2', '2', '2', '28', '0529', '29', '2', '1', '1', '1', '1', '2', '4', '4', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '29', '0530', '30', '1', '1', '1', '1', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '30', '0531', '31', '1', '1', '1', '1', '1', '1', '1', '1', '4', '1', '2', '4', '2', '2', '1', '1', '2', '2']\n",
            "672\n",
            "000000000\n",
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n",
            "11\n",
            "12\n",
            "13\n",
            "14\n",
            "15\n",
            "16\n",
            "17\n",
            "18\n",
            "19\n",
            "20\n",
            "21\n",
            "22\n",
            "23\n",
            "24\n",
            "25\n",
            "26\n",
            "27\n",
            "28\n",
            "29\n",
            "30\n",
            "31\n",
            "32\n",
            "33\n",
            "34\n",
            "35\n",
            "36\n",
            "37\n",
            "38\n",
            "39\n",
            "40\n",
            "41\n",
            "42\n",
            "43\n",
            "44\n",
            "45\n",
            "46\n",
            "47\n",
            "48\n",
            "49\n",
            "50\n",
            "51\n",
            "52\n",
            "53\n",
            "54\n",
            "55\n",
            "56\n",
            "57\n",
            "58\n",
            "59\n",
            "60\n",
            "61\n",
            "62\n",
            "63\n",
            "64\n",
            "65\n",
            "66\n",
            "67\n",
            "68\n",
            "69\n",
            "70\n",
            "71\n",
            "72\n",
            "73\n",
            "74\n",
            "75\n",
            "76\n",
            "77\n",
            "78\n",
            "79\n",
            "80\n",
            "81\n",
            "82\n",
            "83\n",
            "84\n",
            "85\n",
            "86\n",
            "87\n",
            "88\n",
            "89\n",
            "90\n",
            "91\n",
            "92\n",
            "93\n",
            "94\n",
            "95\n",
            "96\n",
            "97\n",
            "98\n",
            "99\n",
            "100\n",
            "101\n",
            "102\n",
            "103\n",
            "104\n",
            "105\n",
            "106\n",
            "107\n",
            "108\n",
            "109\n",
            "110\n",
            "111\n",
            "112\n",
            "113\n",
            "114\n",
            "115\n",
            "116\n",
            "117\n",
            "118\n",
            "119\n",
            "120\n",
            "121\n",
            "122\n",
            "123\n",
            "124\n",
            "125\n",
            "126\n",
            "127\n",
            "128\n",
            "129\n",
            "130\n",
            "131\n",
            "132\n",
            "133\n",
            "134\n",
            "135\n",
            "136\n",
            "137\n",
            "138\n",
            "139\n",
            "140\n",
            "141\n",
            "142\n",
            "143\n",
            "144\n",
            "145\n",
            "146\n",
            "147\n",
            "148\n",
            "149\n",
            "150\n",
            "151\n",
            "152\n",
            "153\n",
            "154\n",
            "155\n",
            "156\n",
            "157\n",
            "158\n",
            "159\n",
            "160\n",
            "161\n",
            "162\n",
            "163\n",
            "164\n",
            "165\n",
            "166\n",
            "167\n",
            "168\n",
            "169\n",
            "170\n",
            "171\n",
            "172\n",
            "173\n",
            "174\n",
            "175\n",
            "176\n",
            "177\n",
            "178\n",
            "179\n",
            "180\n",
            "181\n",
            "182\n",
            "183\n",
            "184\n",
            "185\n",
            "186\n",
            "187\n",
            "188\n",
            "189\n",
            "190\n",
            "191\n",
            "192\n",
            "193\n",
            "194\n",
            "195\n",
            "196\n",
            "197\n",
            "198\n",
            "199\n",
            "200\n",
            "201\n",
            "202\n",
            "203\n",
            "204\n",
            "205\n",
            "206\n",
            "207\n",
            "208\n",
            "209\n",
            "210\n",
            "211\n",
            "212\n",
            "213\n",
            "214\n",
            "215\n",
            "216\n",
            "217\n",
            "218\n",
            "219\n",
            "220\n",
            "221\n",
            "222\n",
            "223\n",
            "224\n",
            "225\n",
            "226\n",
            "227\n",
            "228\n",
            "229\n",
            "230\n",
            "231\n",
            "232\n",
            "233\n",
            "234\n",
            "235\n",
            "236\n",
            "237\n",
            "238\n",
            "239\n",
            "240\n",
            "241\n",
            "242\n",
            "243\n",
            "244\n",
            "245\n",
            "246\n",
            "247\n",
            "248\n",
            "249\n",
            "250\n",
            "251\n",
            "252\n",
            "253\n",
            "254\n",
            "255\n",
            "256\n",
            "257\n",
            "258\n",
            "259\n",
            "260\n",
            "261\n",
            "262\n",
            "263\n",
            "264\n",
            "265\n",
            "266\n",
            "267\n",
            "268\n",
            "269\n",
            "270\n",
            "271\n",
            "272\n",
            "273\n",
            "274\n",
            "275\n",
            "276\n",
            "277\n",
            "278\n",
            "279\n",
            "280\n",
            "281\n",
            "282\n",
            "283\n",
            "284\n",
            "285\n",
            "286\n",
            "287\n",
            "288\n",
            "289\n",
            "290\n",
            "291\n",
            "292\n",
            "293\n",
            "294\n",
            "295\n",
            "296\n",
            "297\n",
            "298\n",
            "299\n",
            "300\n",
            "301\n",
            "302\n",
            "303\n",
            "304\n",
            "305\n",
            "306\n",
            "307\n",
            "308\n",
            "309\n",
            "310\n",
            "311\n",
            "312\n",
            "313\n",
            "314\n",
            "315\n",
            "316\n",
            "317\n",
            "318\n",
            "319\n",
            "320\n",
            "321\n",
            "322\n",
            "323\n",
            "324\n",
            "325\n",
            "326\n",
            "327\n",
            "328\n",
            "329\n",
            "330\n",
            "331\n",
            "332\n",
            "333\n",
            "334\n",
            "335\n",
            "336\n",
            "337\n",
            "338\n",
            "339\n",
            "340\n",
            "341\n",
            "342\n",
            "343\n",
            "344\n",
            "345\n",
            "346\n",
            "347\n",
            "348\n",
            "349\n",
            "350\n",
            "351\n",
            "352\n",
            "353\n",
            "354\n",
            "355\n",
            "356\n",
            "357\n",
            "358\n",
            "359\n",
            "360\n",
            "361\n",
            "362\n",
            "363\n",
            "364\n",
            "365\n",
            "366\n",
            "367\n",
            "368\n",
            "369\n",
            "370\n",
            "371\n",
            "372\n",
            "373\n",
            "374\n",
            "375\n",
            "376\n",
            "377\n",
            "378\n",
            "379\n",
            "380\n",
            "381\n",
            "382\n",
            "383\n",
            "384\n",
            "385\n",
            "386\n",
            "387\n",
            "388\n",
            "389\n",
            "390\n",
            "391\n",
            "392\n",
            "393\n",
            "394\n",
            "395\n",
            "396\n",
            "397\n",
            "398\n",
            "399\n",
            "400\n",
            "401\n",
            "402\n",
            "403\n",
            "404\n",
            "405\n",
            "406\n",
            "407\n",
            "408\n",
            "409\n",
            "410\n",
            "411\n",
            "412\n",
            "413\n",
            "414\n",
            "415\n",
            "416\n",
            "417\n",
            "418\n",
            "419\n",
            "420\n",
            "421\n",
            "422\n",
            "423\n",
            "424\n",
            "425\n",
            "426\n",
            "427\n",
            "428\n",
            "429\n",
            "430\n",
            "431\n",
            "432\n",
            "433\n",
            "434\n",
            "435\n",
            "436\n",
            "437\n",
            "438\n",
            "439\n",
            "440\n",
            "441\n",
            "442\n",
            "443\n",
            "444\n",
            "445\n",
            "446\n",
            "447\n",
            "448\n",
            "449\n",
            "450\n",
            "451\n",
            "452\n",
            "453\n",
            "454\n",
            "455\n",
            "456\n",
            "457\n",
            "458\n",
            "459\n",
            "460\n",
            "461\n",
            "462\n",
            "463\n",
            "464\n",
            "465\n",
            "466\n",
            "467\n",
            "468\n",
            "469\n",
            "470\n",
            "471\n",
            "472\n",
            "473\n",
            "474\n",
            "475\n",
            "476\n",
            "477\n",
            "478\n",
            "479\n",
            "480\n",
            "481\n",
            "482\n",
            "483\n",
            "484\n",
            "485\n",
            "486\n",
            "487\n",
            "488\n",
            "489\n",
            "490\n",
            "491\n",
            "492\n",
            "493\n",
            "494\n",
            "495\n",
            "496\n",
            "497\n",
            "498\n",
            "499\n",
            "500\n",
            "501\n",
            "502\n",
            "503\n",
            "504\n",
            "505\n",
            "506\n",
            "507\n",
            "508\n",
            "509\n",
            "510\n",
            "511\n",
            "512\n",
            "513\n",
            "514\n",
            "515\n",
            "516\n",
            "517\n",
            "518\n",
            "519\n",
            "520\n",
            "521\n",
            "522\n",
            "523\n",
            "524\n",
            "525\n",
            "526\n",
            "527\n",
            "528\n",
            "529\n",
            "530\n",
            "531\n",
            "532\n",
            "533\n",
            "534\n",
            "535\n",
            "536\n",
            "537\n",
            "538\n",
            "539\n",
            "540\n",
            "541\n",
            "542\n",
            "543\n",
            "544\n",
            "545\n",
            "546\n",
            "547\n",
            "548\n",
            "549\n",
            "550\n",
            "551\n",
            "552\n",
            "553\n",
            "554\n",
            "555\n",
            "556\n",
            "557\n",
            "558\n",
            "559\n",
            "560\n",
            "561\n",
            "562\n",
            "563\n",
            "564\n",
            "565\n",
            "566\n",
            "567\n",
            "568\n",
            "569\n",
            "570\n",
            "571\n",
            "572\n",
            "573\n",
            "574\n",
            "575\n",
            "576\n",
            "577\n",
            "578\n",
            "579\n",
            "580\n",
            "581\n",
            "582\n",
            "583\n",
            "584\n",
            "585\n",
            "586\n",
            "587\n",
            "588\n",
            "589\n",
            "590\n",
            "591\n",
            "592\n",
            "593\n",
            "594\n",
            "595\n",
            "596\n",
            "597\n",
            "598\n",
            "599\n",
            "600\n",
            "601\n",
            "602\n",
            "603\n",
            "604\n",
            "605\n",
            "606\n",
            "607\n",
            "608\n",
            "609\n",
            "610\n",
            "611\n",
            "612\n",
            "613\n",
            "614\n",
            "615\n",
            "616\n",
            "617\n",
            "618\n",
            "619\n",
            "620\n",
            "621\n",
            "622\n",
            "623\n",
            "624\n",
            "625\n",
            "626\n",
            "627\n",
            "628\n",
            "629\n",
            "630\n",
            "631\n",
            "632\n",
            "633\n",
            "634\n",
            "635\n",
            "636\n",
            "637\n",
            "638\n",
            "639\n",
            "640\n",
            "641\n",
            "642\n",
            "643\n",
            "644\n",
            "645\n",
            "646\n",
            "647\n",
            "648\n",
            "649\n",
            "650\n",
            "651\n",
            "652\n",
            "653\n",
            "654\n",
            "655\n",
            "656\n",
            "657\n",
            "658\n",
            "659\n",
            "660\n",
            "661\n",
            "662\n",
            "663\n",
            "664\n",
            "665\n",
            "666\n",
            "667\n",
            "668\n",
            "669\n",
            "670\n",
            "671\n",
            "['ID', 'Date', 'Feet', 'Ankl', 'Caf', 'Kne', 'Qua', 'But', 'Gro', 'Abs', 'Bac', 'Lat', 'Tra', 'Sho', 'Chs', 'Tric', 'Bic', 'Nec', 'Hea', '0', '0501', '01', '2', '2', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0502', '02', '4', '1', '1', '4', '4', '4', '4', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '2', '0503', '03', '3', '1', '3', '3', '2', '2', '2', '1', '4', '2', '4', '4', '4', '4', '1', '4', '4', '3', '0504', '04', '2', '1', '2', '1', '1', '2', '1', '1', '2', '1', '2', '2', '4', '4', '1', '2', '2', '4', '0505', '05', '2', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '2', '1', '5', '0506', '06', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '6', '0507', '07', '1', '1', '2', '1', '1', '2', '2', '2', '1', '1', '2', '1', '1', '1', '1', '2', '2', '7', '0508', '08', '1', '2', '1', '1', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '1', '2', '1', '8', '0509', '09', '4', '2', '2', '2', '1', '1', '4', '1', '2', '1', '4', '4', '2', '4', '1', '4', '2', '9', '0510', '10', '2', '1', '2', '1', '2', '2', '2', '2', '1', '1', '2', '2', '1', '2', '1', '2', '1', '10', '0511', '11', '1', '1', '2', '1', '2', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '2', '1', '11', '0512', '12', '1', '1', '1', '1', '1', '1', '2', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '12', '0513', '13', '2', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '13', '0514', '14', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '14', '0515', '15', '2', '1', '1', '1', '2', '1', '2', '1', '2', '2', '2', '2', '1', '1', '1', '2', '2', '15', '0516', '16', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '16', '0517', '17', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '17', '0518', '18', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0519', '19', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '19', '20', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '20', '0521', '2', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '21', '0522', '22', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '22', '0523', '23', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '23', '0524', '24', '2', '1', '2', '1', '2', '2', '2', '4', '1', '2', '2', '1', '1', '1', '1', '4', '2', '24', '0525', '25', '2', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '4', '2', '2', '2', '2', '2', '25', '0526', '26', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '1', '2', '1', '2', '1', '26', '0527', '27', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '27', '0528', '28', '4', '1', '1', '1', '1', '2', '4', '2', '2', '2', '2', '2', '1', '1', '2', '2', '2', '28', '0529', '29', '2', '1', '1', '1', '1', '2', '4', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '29', '0530', '30', '1', '1', '1', '1', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '30', '0531', '31', '1', '1', '1', '1', '1', '1', '1', '1', '4', '2', '4', '2', '2', '1', '1', '2', '2']\n",
            "640\n",
            "bbbbbb\n",
            "['ID', 'Date', 'Feet', 'Stm', 'Ankl', 'Caf', 'Kne', 'Qua', 'But', 'Gro', 'Abs', 'Bac', 'Lat', 'Tra', 'Sho', 'Chs', 'Tric', 'Bic', 'Nec', 'Hea', '0', '0501', '01', '2', '4', '2', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0502', '02', '4', '2', '1', '1', '4', '4', '4', '4', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '2', '0503', '03', '3', '3', '1', '3', '3', '2', '2', '2', '1', '4', '2', '4', '4', '4', '4', '1', '4', '4', '3', '0504', '04', '2', '4', '1', '2', '1', '1', '2', '1', '1', '2', '1', '2', '2', '4', '4', '1', '2', '2', '4', '0505', '05', '2', '4', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '2', '1', '5', '0506', '06', '1', '5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '6', '0507', '07', '1', '5', '1', '2', '1', '1', '2', '2', '2', '1', '1', '2', '1', '1', '1', '1', '2', '2', '7', '0508', '08', '1', '5', '2', '1', '1', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '1', '2', '1', '8', '0509', '09', '4', '2', '2', '2', '2', '1', '1', '4', '1', '2', '1', '4', '4', '2', '4', '1', '4', '2', '9', '0510', '10', '2', '4', '1', '2', '1', '2', '2', '2', '2', '1', '1', '2', '2', '1', '2', '1', '2', '1', '10', '0511', '11', '1', '5', '1', '2', '1', '2', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '2', '1', '11', '0512', '12', '1', '5', '1', '1', '1', '1', '1', '2', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '12', '0513', '13', '2', '4', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '13', '0514', '14', '1', '5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '14', '0515', '15', '2', '4', '1', '1', '1', '2', '1', '2', '1', '2', '2', '2', '2', '1', '1', '1', '2', '2', '15', '0516', '16', '1', '5', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '16', '0517', '17', '1', '5', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '17', '0518', '18', '1', '5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0519', '19', '1', '5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '19', '20', '1', '5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '20', '0521', '2', '4', '1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '21', '0522', '22', '4', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '22', '0523', '23', '5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '23', '0524', '24', '4', '2', '1', '2', '1', '2', '2', '2', '4', '1', '2', '2', '1', '1', '1', '1', '4', '2', '24', '0525', '25', '4', '2', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '4', '2', '2', '2', '2', '2', '25', '0526', '26', '5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '1', '2', '1', '2', '1', '26', '0527', '27', '5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '27', '0528', '28', '2', '4', '1', '1', '1', '1', '2', '4', '2', '2', '2', '2', '2', '1', '1', '2', '2', '2', '28', '0529', '29', '4', '2', '1', '1', '1', '1', '2', '4', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '29', '0530', '30', '5', '1', '1', '1', '1', '1', '1', '2', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '30', '0531', '31', '5', '1', '1', '1', '1', '1', '1', '1', '1', '4', '2', '4', '2', '2', '1', '1', '2', '2']\n",
            "672\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "im6LHi3oyGk2"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6nO7QtFP9aNR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mere2W9s4IR4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0a8FjPGe9aQF"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}