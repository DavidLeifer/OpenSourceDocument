{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fHIWbrpk4NMYcse3Xdkb-S8XiS2pxzJm","timestamp":1721260308720},{"file_id":"1STKhtVVaknUZiohwWLdfyoZ3zg6Veimx","timestamp":1721260179755}],"authorship_tag":"ABX9TyP/DCJ4zObwCEbV//6IGO7d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["def todo(self):\n","  # List of primary issues\n","  # todo    description                                   hours   progress      Note\n","  #\n","  # todo0   A01.csv skate, long, downhill, juggling,      30    Processing    rgb_unique_bin\n","  #         running mean duration by category.\n","  #\n","  # todo1   A01.csv category by day of the week or\n","  #         time of day i.e. morning, afternoon, night\n","  #         or blocks of 3.\n","  #\n","  # todo2   A0.csv nltk the 'Explanation' and 'Notes'\n","  #         sections? Manual descriptions are already\n","  #         included in the write-up.\n","  #\n","  # todo3   Another tutorial chapter on merge sort.\n","  #         Compare with Python's built-in len(),\n","  #         sort(), and replace().\n","  #\n","  # todo4   The graphing part could be included in\n","  #         Chapter 1 with pandas and SciPy.\n","  #\n","  # todo5   A01.csv longboard distance, running\n","  #         distance per day were not recorded well.\n","  #\n","  # todo6   P0P1B0B1.csv timeseries graphing.             45.5     Completed\n","  #\n","  # todo7   P1.csv manual vs observed prediction\n","  #         accuracy F1 or RMSE.\n","  #\n","  # todo8   B01.csv Pearson-Correlation and day-          2        Completed    Found that there was not correlation between parametric variables.\n","  #         delayed between calories, alcohol, exercise.                        An index similar to ENSO is redundant since there were no consecutive\n","  #                                                                             observations over 4 alcohol or excessive (calorie - calorie burned).\n","  #\n","  # todo9   A01P01B01 moving window spearman correlation           Processing   Would have to sort these for rank, which was started in todo0.\n","  #         between activity, duration, time of day, pain,\n","  #         nutrients, calories, alcohol.\n","  #\n","  # todo10  tbd data filling and automatic predictions.\n","  #         idk if thats another chapter or avoided.\n","  #\n","  # todo11  Manual weather observations and PRISM data\n","  #         will be in a different GitHub to avoid confusion.\n","  #\n","  # Time spent at a computer programming\n","  # Total estimate  :\n","  # Total actual    :\n","  #\n","  # Purpose\n","  # The goal of writing this is to waste as much time as possible in between\n","  # skateboarding, lifting, or exercise to avoid overtraining while retaining\n","  # logical thought process during long stretches of unemployment. These were\n","  # written on a computer with a 1.5-2 hour battery to restrict excessive\n","  # programming by limiting hardware access.\n","  #\n","  # Abstract\n","  # No library Python with C-like syntax is used for data manipulation and\n","  # graphing whereby arrays are handled without dictionaries. The only\n","  # library used is Matplotlib for RGB graphing and to avoid writing a image or\n","  # video format that would likely spread misinformation. An implementation of\n","  # the merge sort algorithm was used to alphabetize exercise activity for\n","  # binning and graphing frequency by unique type. The built-in Python methods\n","  # for 'replace' and 'sort' were also manually written for learning purposes.\n","  # Another function was written for'len' but was unnecessary.\n","\n","  # Start date: 20250125\n","  # End date:\n","\n","  # Below is an exhaustive list of secondary issues.\n","\n","  # List of secondary issues\n","  # todo   description                                                  progress\n","  # todo0  rewrite parser for unicode csv str/int.\n","  # todo1  Stats class avoid NA, NAAN, -9999, etc.\n","  # todo2  refractor RGB_graphs.\n","  # todo3  monthly means on bar graphs.\n","  # todo4  organize merge_sort into another classe.                     Complete\n","  # todo5  modify merge sort to accept entire CSV.                      Class\n","  # todo6  Handle multi word activity descriptions consistently.        Class\n","  # todo7  switch the second capital letter to lower case if exists.    Class\n","  # todo8  unchain the four merge sort functions.                       Class\n","\n","  return\n","\n","import sys\n","import matplotlib.pyplot as plt\n","print(sys.version)\n","# 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]\n","# 3.11.11 (main, Dec  4 2024, 08:55:07) [GCC 11.4.0]\n","\n","# Interesting method to print callable methods on an object.\n","# print(dir(left_right))\n","# Example is obj.__class__ that prints the data type without using the type(obj) method\n","# type_check = str(left_right.__class__)\n","\n","#####################################################################################\n","# Part A: CSV or TSV parser class to open the file and parse the values into a list #\n","#####################################################################################\n","class CSV_Parser:\n","  # Initialize the input variables\n","  def __init__(self, data_path):\n","    self.data_path = data_path\n","  def file_opener(self):\n","    with open(self.data_path, \"r\") as data_open:\n","      data_read = data_open.read()\n","      return data_read\n","  # Index the commas and line breaks\n","  def comma_index(self, open_file, path, column_len):\n","    data_comma_place = [0]\n","    column_pl_len = 0\n","    path_split = [ext for ext in path]\n","    path_ext = \"\".join(path_split[-3:])\n","    for i in range(len(open_file)):\n","      data1_col1 = open_file[i]\n","      if path_ext == \"csv\":\n","        if data1_col1 == \",\":\n","          data_comma_place.append(i)\n","          data_comma_place.append(i+1)\n","      elif path_ext == \"tsv\":\n","        if data1_col1 == \"\\t\":\n","          data_comma_place.append(i)\n","          data_comma_place.append(i+1)\n","      if data1_col1 == \"\\n\":\n","        data_comma_place.append(i)\n","        data_comma_place.append(i+1)\n","        # If you want to use the function to get the column width, set to 1\n","        if column_len == 1:\n","          col_width = len(data_comma_place)\n","          return col_width\n","          break\n","    last_val = data_comma_place[-1] + 2\n","    data_comma_place.append(last_val)\n","    return data_comma_place\n","  # Splitting the csv characters into list of words based on indexed comma position\n","  def csv_value_list(self, data_comma_out, open_file, col_width, col_head):\n","    j = col_head\n","    data_val_list = []\n","    for i in range(len(data_comma_out)):\n","      if j >= len(data_comma_out):\n","        break\n","      comma_strt = data_comma_out[j]\n","      j += 1\n","      comma_end = data_comma_out[j]\n","      #print(comma_strt, \"and \", comma_end)\n","      j += 1\n","      data_val_list.append(open_file[comma_strt:comma_end])\n","      j = j + (col_width * 2)\n","    return data_val_list\n","  # Flipping the columns from high to low for readability\n","  # If the original value was 5, set it to equal 0 (no pain)\n","  # If the original value was 0, set it to equal to 5 (high pain) etc.\n","  # If none of those things are true, append the string (for the column header)\n","  def csv_flipper(self, csv_list, col_width):\n","    csv_flipped = []\n","    for i in csv_list:\n","      if i == str(5):\n","        n = str(1)\n","        csv_flipped.append(n)\n","      elif i == str(4):\n","        n = str(2)\n","        csv_flipped.append(n)\n","      elif i == str(3):\n","        n = str(3)\n","        csv_flipped.append(n)\n","      elif i == str(2):\n","        n = str(4)\n","        csv_flipped.append(n)\n","      elif i == str(1):\n","        n = str(5)\n","        csv_flipped.append(n)\n","      else:\n","        csv_flipped.append(i)\n","    return csv_flipped\n","\n","######################################################\n","# Part B: Get descriptive statistics of each column. #\n","######################################################\n","class Statistics:\n","  # Returns a dictionary with the header and mean\n","  def mu(self, col_list):\n","    total = 0\n","    counter = 0\n","    # Column has to have a header\n","    for i in col_list[1:]:\n","      if i == \"NA\":\n","        continue\n","      total = total + float(i)\n","      counter += 1\n","    mean = total / counter\n","    header_mean = [col_list[0], mean]\n","    return header_mean\n","  # Returns the 2-4 moment of the distribution\n","  # Different than Google Sheets sample vs population\n","  def mnt(self, header, mean, col_list):\n","    col_1 = len(col_list) - 1\n","    stn = 0\n","    skew = 0\n","    kurt = 0\n","    counter = 0\n","    for i in col_list[1:]:\n","      if i == \"NA\":\n","        continue\n","      # secondary todo: doesn't work with decimals\n","      n1 = int(i) - mean\n","      n1_sqr = n1 ** 2\n","      n1_cube = n1 ** 3\n","      n1_quad = n1 ** 4\n","      stn = stn + n1_sqr\n","      skew = skew + n1_cube\n","      kurt = kurt + n1_quad\n","      counter += 1\n","    # Sample variance (n-1)\n","    # Population variance (n)\n","    counter = (counter - 1)\n","    stn_small_sqr = float(stn) / counter\n","    stn_small = stn_small_sqr ** .5\n","    skew_small_sqr = float(skew) / counter\n","    skew_small = skew_small_sqr / (stn_small ** 3)\n","    kurt_small_sqr = float(kurt) / counter\n","    kurt_small = kurt_small_sqr / (stn_small ** 4)\n","    return [header, stn_small, skew_small, kurt_small]\n","  # Covariance and correlation\n","  def covar(self, x_mean, y_mean, col_1_list, col_2_list):\n","    col_len = len(col_1_list) - 1\n","    covar = 0\n","    x1y1_sum = 0\n","    counter = 0\n","    for i in range(col_len):\n","      #if i == col_len-2:\n","      #  break\n","      if col_1_list[i+1] == \"NA\":\n","        continue\n","      if col_2_list[i+1] == \"NA\":\n","        continue\n","      # print(i+3,i)\n","      # print(\"x_mean: \", x_mean[1], \"x_value: \", col_1_list[i+1])\n","      x1 = float(col_1_list[i+1]) - x_mean[1]\n","      y1 = float(col_2_list[i+1]) - y_mean[1]\n","      x1y1 = x1 * y1\n","      x1y1_sum = x1y1_sum + x1y1\n","      counter += 1\n","    covar = x1y1_sum / counter\n","    return covar\n","  def cor(self, covar, col_1_stnd, col_2_stnd):\n","    stnd12 = col_1_stnd * col_2_stnd\n","    cor = covar / stnd12\n","    return cor\n","\n","######################################################\n","# Part C: Data visualization with a timeseries graph #\n","######################################################\n","# 'Graph' class accepts three variables: verticle arranged 'data',\n","# the date column'date_col_num', and the data column 'data_col_num'\n","class Graph:\n","  # Initialize the input variables\n","  def __init__(self, data, date_col_num, data_col_num):\n","    self.data = data\n","    self.date_col_num = date_col_num\n","    self.data_col_num = data_col_num\n","  def hi_lo(self, data_col_num):\n","    # The date and date column to be used\n","    data_col = self.data[data_col_num]\n","    data_col_len = len(data_col)\n","    # High and low of values\n","    hi_lo_count = 1\n","    hi = data_col[1]\n","    lo = data_col[1]\n","    for e in range(len(data_col[1:])):\n","      hi_lo_count += 1\n","      if hi_lo_count == (len(data_col[1:]) + 1):\n","        break\n","      if hi < data_col[hi_lo_count]:\n","        hi = data_col[hi_lo_count]\n","      if lo > data_col[hi_lo_count]:\n","        lo = data_col[hi_lo_count]\n","    return [hi, lo]\n","  def binned(self, hi_lo):\n","    # high value (5 in this case or hi_lo[0])\n","    # The date and date column to be used\n","    # TODO it works but is not resuable for other data ranges\n","    date_col = self.data[self.date_col_num]\n","    data_col = self.data[self.data_col_num]\n","    data_col_len = len(data_col)\n","\n","    fiver = []\n","    fourer = []\n","    threer = []\n","    twoer = []\n","    oner = []\n","    lol_stm_date = []\n","    counter = 1\n","    # Binned with date value\n","    for i in range(data_col_len):\n","      P0_column = self.data[self.data_col_num]\n","      if counter == len(self.data[0]):\n","        break\n","      # secondary todo:\n","      if P0_column[counter] == \"NA\":\n","        counter += 1\n","        continue\n","      if float(P0_column[counter]) == 5:\n","        fiver.append([date_col[counter], P0_column[counter]])\n","      elif float(P0_column[counter]) == 4:\n","        fourer.append([date_col[counter], P0_column[counter]])\n","      elif float(P0_column[counter]) == 3:\n","        threer.append([date_col[counter], P0_column[counter]])\n","      elif float(P0_column[counter]) == 2:\n","        twoer.append([date_col[counter], P0_column[counter]])\n","      elif float(P0_column[counter]) == 1:\n","        oner.append([date_col[counter], P0_column[counter]])\n","      counter += 1\n","    # Combining the binned data into one dictionary\n","    lol_date_stm = [fiver, fourer, threer, twoer, oner]\n","    return lol_date_stm\n","\n","  def time_series(self, date_hi_lo, lol_date_stm):\n","    date_col = self.data[self.date_col_num]\n","    # Base of the month, plus 00 i.e. 500\n","    date_base = int(date_hi_lo[1]) - 1\n","    # The number of spaces is the 'day' (date - month) - 'prev_day_space_int'\n","    # The difference between the values is multiplied by ' ' for each 5,4,3,2,1\n","    # Value with a '+' character marking the position\n","    spacer = []\n","    prev_day_space_int = 0\n","    for i in lol_date_stm:\n","      spacer_mid = []\n","      for ii in i:\n","        # ii is [date, value] in order\n","        # an if else statement\n","        # 7 starts at 22, 31 days\n","        # 8 30 days\n","        # 9 30 days\n","        # 10 31 days\n","        day = int(ii[0]) - date_base\n","        # print(day)\n","        day_count = day - prev_day_space_int\n","        day_space_str = ((day_count-1)*2) * \" \"\n","        spacer_mid.append(day_space_str)\n","        prev_day_space_int = day\n","      prev_day_space_int = 0\n","      spacer.append(spacer_mid)\n","    y_val = [y for y in range(len(spacer),0,-1)]\n","    return [spacer, y_val]\n","  def time_series_print(self,spacer,y_val):\n","    date_col = self.data[self.date_col_num]\n","    for j,k in zip(spacer,y_val):\n","      # y values\n","      print(k,end=\" \")\n","      for l in j:\n","        print(l,end=\"\")\n","        print(\"+\",end=\" \")\n","      print()\n","    # x values\n","    for m in range(len(date_col[0])-1):\n","      print(\"  \",end=\"\")\n","      for n in date_col[1:]:\n","        print(n[m], end=\" \")\n","      print()\n","    return\n","  def time_series_write(self,header,txt_out,spacer,y_val):\n","    # Open the output file location and write data to the txt\n","    date_col = self.data[self.date_col_num]\n","    file_output = open(txt_out, \"w\")\n","    file_output.write(header)\n","    file_output.write(\"\\n\")\n","    file_output.write(\"\\n\")\n","    # y values\n","    for j,k in zip(spacer,y_val):\n","      file_output.write(str(k) + \" \")\n","      for l in j:\n","        file_output.write(str(l))\n","        file_output.write(\"+\" + \" \")\n","      file_output.write(\"\\n\")\n","    # x values\n","    for m in range(len(date_col[0])-1):\n","      file_output.write(\"  \")\n","      for n in date_col[1:]:\n","        file_output.write(str(n[m]) + \" \")\n","      file_output.write(\"\\n\")\n","    file_output.close()\n","    return\n","\n","###############################################\n","# Part D: Data visualization with a RGB graph #\n","###############################################\n","# Matplotlib for color because otherwise you would have\n","# to write hardware code to avoid using Python or C libraries.\n","class Graphs_rgb:\n","  # Initialize the input variables\n","  def __init__(self, data):\n","    self.data = data\n","\n","  # Four utility functions daisy chained to rgb_timeseries_bar()\n","  # Minor todo: unchain them lol\n","  def rgb_timeseries_mean(self,formatted_data_group):\n","    # Input is list (1-4) of lists (95) of each columns values without NA\n","    # i.e. [[dist1],[dist1],[dist1], etc]\n","    date_col_len = len(formatted_data_group[0])\n","    group_mean = []\n","    # Length of the column (95 without \"NA\" as filtered in rgb_date_time)\n","    for i in range(date_col_len):\n","      row_list = []\n","      # Length of columns to be summarized (1-4) 95 row_list values\n","      for j in range(len(formatted_data_group)):\n","        row_list.append(formatted_data_group[j][i])\n","      # Mean at each day for each group\n","      row_count = len(row_list)\n","      row_sum = sum(row_list)\n","      row_mean = row_sum / row_count\n","      group_mean.append(row_mean)\n","    return group_mean\n","\n","  def rgb_date_time(self,csv_groups,date_col):\n","    day_count = len(self.data[1])\n","    k = 0\n","    group_dist = []\n","    for i in csv_groups:\n","      dist0 = []\n","      dist1 = []\n","      dist2 = []\n","      for j in range(day_count):\n","        if j == (day_count-1):\n","          break\n","        if i[j+1] == \"NA\":\n","          continue\n","        else:\n","          # Formatting the date\n","          # year = 2024\n","          date_length = date_col[j+1]\n","          if len(date_length) < 4:\n","            month = date_length[:1]\n","            day = date_length[1:]\n","          else:\n","            month = date_length[:2]\n","            day = date_length[2:]\n","          date_format0 = month + \"/\" + day\n","          dist0.append(date_format0)\n","          dist1.append(int(i[j+1]))\n","          date_format1 = month + \"/\" + day\n","          if int(day) % 5 == 0:\n","            dist2.append(date_format1)\n","          else:\n","            dist2.append(\" \")\n","            continue\n","      group_dist.append([dist0,dist1,dist2])\n","      k += 1\n","    return group_dist\n","\n","  def rgb_P1_style(self,final_title,line):\n","    plt.yticks(range(1,6))\n","    if final_title == 'Stamina':\n","      plt.ylabel(final_title)\n","    else:\n","      plt.title(final_title)\n","      plt.ylabel(\"Pain\")\n","      if line == 1:\n","        plt.legend()\n","    return\n","\n","  def rgb_B1_style(self,final_title,line):\n","    if final_title == 'Calories':\n","      plt.yticks(range(1200,4500,400))\n","      plt.ylabel(\"Intake\")\n","      plt.title(final_title)\n","    elif final_title == 'Alcohol Servings':\n","      plt.yticks(range(0,16))\n","      plt.title(\"Alcohol\")\n","      plt.ylabel(\"Servings\")\n","    elif final_title == 'Exercise':\n","      plt.yticks(range(0,3))\n","      plt.title(final_title)\n","      # plt.ylabel(\"Calories Out\")\n","      plt.text(.1,.5, \"Calories Out \\n2 = 250+ \\n1 = 1-249\",\n","         bbox={'facecolor': 'white', 'alpha': .75, 'pad': 10})\n","    else:\n","      plt.yticks(range(1,6))\n","      if line == 1:\n","        plt.title(\"Nutrients\")\n","      else:\n","        plt.title(final_title)\n","      plt.ylabel(\"Intake\")\n","      plt.legend()\n","    return\n","\n","  # Bar plots for each column\n","  def rgb_timeseries_bar(self,title_full,start_val,P1_B1):\n","    for i in range(start_val,len(title_full)+start_val):\n","      formatted_csv_group = self.rgb_date_time([self.data[i]],self.data[1])\n","      fig, ax = plt.subplots(1, 1, layout='constrained', figsize=(15, 5))\n","      ax.bar(formatted_csv_group[0][0], formatted_csv_group[0][1], width=0.8, align='edge')\n","      final_title = title_full[i-start_val]\n","      # Format the title, yticks, and ylabel\n","      if P1_B1 == 0:\n","        self.rgb_P1_style(final_title,0)\n","      elif P1_B1 == 1:\n","        self.rgb_B1_style(final_title,0)\n","      elif P1_B1 == 2:\n","        pass\n","        # self.rgb_A0_style(final_title,0)\n","      plt.xticks(formatted_csv_group[0][0], labels=formatted_csv_group[0][2])\n","      plt.margins()\n","      plt.grid()\n","      # plt.savefig(final_title + '.jpg')\n","    return\n","\n","\n","  # Returns a date list without blanks\n","  def rgb_date_list(self):\n","    # date_literal is 0-30 days\n","    date_literal = []\n","    # Makes a list with only the dates\n","    for i in range(1,len(self.data[2])):\n","      if len(self.data[2][i]) > 0:\n","        date_literal.append(self.data[2][i])\n","    return date_literal\n","\n","  # Multiple lines same graphs.\n","  def rgb_timeseries_line(self,title_full,start_val,groups_num,title_label,P1_B1):\n","    data = self.data\n","    # secondary todo: name instead of number position\n","    j = 1\n","    # Adding multiple lines to a single plot by group with formatting\n","    for i in range(len(groups_num)):\n","      subset0 = groups_num[i:j][0]\n","      if subset0 == groups_num[-1]:\n","        break\n","      subset1 = groups_num[i+1:j+1][0]\n","      csv_groups = data[subset0:subset1]\n","      formatted_csv_group = self.rgb_date_time(csv_groups,self.data[1])\n","      # Format subplot\n","      fig, ax = plt.subplots(1, 1, layout='constrained', figsize=(15, 5))\n","      # Get the formatted_csv_group second list of values in each group\n","      dist1_list = [dist1[1] for dist1 in formatted_csv_group]\n","      # First 3 columns in data are ID, while the title list isn't.\n","      # Subtract each subset by the start_val of the values (excluding date, id, etc)\n","      title_group = title_full[(subset0-start_val):(subset1-start_val)]\n","      # y = each dist1 in formatted_csv_group, x = every date value, x labels = every 5th date value\n","      for k in range(len(dist1_list)):\n","        ax.plot(formatted_csv_group[0][0], dist1_list[k], label=title_group[k], linewidth=4)\n","        # Format the title, yticks, and ylabel\n","        if P1_B1 == 0:\n","          self.rgb_P1_style(title_label[j-1],1)\n","        elif P1_B1 == 1:\n","          self.rgb_B1_style(title_label[j-1],1)\n","      # Chart formatting and save\n","      plt.xticks(formatted_csv_group[0][0], labels=formatted_csv_group[0][2])\n","      plt.grid()\n","      plt.margins()\n","      #plt.savefig(title_label[j-1] + '.jpg')\n","      j += 1\n","    return\n","\n","  # Summarized with mean\n","  def rgb_timeseries_small(self,csv_groups_num,legend_label,ax):\n","    csv = self.data\n","    j = 1\n","    for i in range(len(csv_groups_num)):\n","      subset0 = csv_groups_num[i:j][0]\n","      if subset0 == csv_groups_num[-1]:\n","        break\n","      subset1 = csv_groups_num[i+1:j+1][0]\n","      csv_groups = csv[subset0:subset1]\n","      # Builds an array to skip NA and format the date\n","      # [[[dist0],[1],[2]],[[dist0],[1],[2]], etc]]]\n","      formatted_csv_group = self.rgb_date_time(csv_groups,self.data[1])\n","      # Get the formatted_csv_group second list of values in each group\n","      dist1_list = [dist1[1] for dist1 in formatted_csv_group]\n","      # Summarize each body part's group with mean\n","      dist1_group_mean = self.rgb_timeseries_mean(dist1_list)\n","      # y = group mean, x = every date value, x labels = every 5th date value\n","      # Specified in rgb_date_time function\n","      ax.plot(formatted_csv_group[0][0], dist1_group_mean, label=legend_label[j-1], linewidth=4)\n","      plt.xticks(formatted_csv_group[0][0], labels=formatted_csv_group[0][2])\n","      j += 1\n","    return\n","\n","# Merge sort is the fastest for worst case scenario sorting: N log(n)\n","# Implementation is from W3 and modified for AZ with ascii ord():\n","# https://www.w3schools.com/dsa/dsa_algo_mergesort.php\n","class Graphs_sort:\n","  # Initialize the input variables\n","  def __init__(self, data):\n","    self.data = data\n","\n","  '''\n","  # The secondary todos would make good computer science class questions.\n","\n","  # Secondary todo 6: Modify merge sort to accept entire CSV as one list input.\n","  # The output is the AZ sorted CSV.\n","\n","  # Secondary todo 7: Handle multi word activity descriptions consistently.\n","  # if first word in two word string is the same as the comparison word, use\n","  # the letter of the second word in the two word string and compare with '0'.\n","\n","  # i.e.        'Guitar 2, Rest 1' and 'Guitar'\n","  # and         'Guitar'           and 'Guitar 2, Rest 1'\n","  #\n","  # should be:  'Guitar 2, Rest 1' and 'Guitar'\n","  # and         'Guitar 2, Rest 1' and 'Guitar'\n","\n","  # Secondary todo 7: switch the second capital letter to lower case if exists.\n","  # Capital then lower case ASCII order is probably a remnant of backward\n","  # compatibility issues with  early low bit hobby computers where every word\n","  # was capitalized and it would have been a pain to rewrite the OS since\n","  # there was no market in the 1970's.\n","  # i.e. 'RPI Firmware' and 'Read' since capital 'P' is a lower number\n","  # on the ASCII chart it would be ordered first regardless of the second word's\n","  # lowercase 'e' despite 'e' appearing before 'p' alphabetically. Write a\n","  # method to switch 'P' to lower case 'p' for ASCII number ordering and swapping\n","  # the two strings. Something along the lines of:\n","\n","  if i > 0 and i is upper case:\n","    # upper case 'P' to lower case 'p'\n","    # ord(i) <- the lower case letter\n","\n","  # Secondary todo 8: Un daisy chain the functions for reusability.\n","  # The functions merge, c_replace, filter_stop are daisy chained\n","  # and called in sort_ascii with filter_stop().\n","  '''\n","\n","  def checker(self,left_activity,right_activity):\n","    # Same do nothing.\n","    if left_activity == right_activity:\n","      checked = 0\n","    # if left_activity[0] == right_activity[0] and len(left_activity) < len(right_activity):\n","    if len(left_activity) > len(right_activity):\n","      checked = 1\n","      # Space in left, not in right, and first left word is same as right.\n","      if \" \" in left_activity and \" \" not in right_activity:\n","        left_split = left_activity.split()\n","        if left_split[0] == right_activity:\n","          checked = 4\n","    elif len(left_activity) < len(right_activity):\n","      checked = 2\n","      # Space in right, not in left, and first right word is same as left.\n","      if \" \" in right_activity and \" \" not in left_activity:\n","        right_split = right_activity.split()\n","        if right_split[0] == left_activity:\n","          # edge case: 'Guitar' 'Guitar 2, Rest 1'\n","          checked = 5\n","    elif len(left_activity) == len(right_activity) and left_activity != right_activity:\n","      checked = 3\n","\n","    # 0 = same, 1 = left word longer, 2 = right word longer, 3 = same length different word, 4 = left space same word, 5 = right space same word,\n","    return checked\n","\n","  # Merge calls ord_sum to calculate the ASCII of the string.\n","  # secondary todo: refractor to accept additional columns\n","  def merge(self,left_in,right_in):\n","      result = []\n","      result_activity = []\n","      result_id = []\n","      result_dur = []\n","      i = j = 0\n","      while i < len(left_in[1]) and j < len(right_in[1]):\n","        left = left_in[0][i]\n","        right = right_in[0][j]\n","        left_activity = left_in[1][i]\n","        right_activity = right_in[1][j]\n","        left_id = left_in[2][i]\n","        right_id = right_in[2][j]\n","        left_dur = left_in[3][i]\n","        right_dur = right_in[3][j]\n","        checked = self.checker(left_activity,right_activity)\n","        # The point of the checker is to skip words that are the same\n","        # or dont need to have each letter ord().\n","        # todo 0: include checked list in bubble sort\n","        # todo 1: swap them in place because otherwise it's n^3\n","        print(checked,left_activity,right_activity)\n","        if left < right:\n","          result.append(left)\n","          result_activity.append(left_activity)\n","          result_id.append(left_id)\n","          result_dur.append(left_dur)\n","          i += 1\n","        else:\n","          result.append(right)\n","          result_activity.append(right_activity)\n","          result_id.append(right_id)\n","          result_dur.append(right_dur)\n","          j += 1\n","\n","      result.extend(left_in[0][i:])\n","      result.extend(right_in[0][j:])\n","      result_activity.extend(left_in[1][i:])\n","      result_activity.extend(right_in[1][j:])\n","      result_id.extend(left_in[2][i:])\n","      result_id.extend(right_in[2][j:])\n","      result_dur.extend(left_in[3][i:])\n","      result_dur.extend(right_in[3][j:])\n","\n","      return [result,result_activity,result_id,result_dur]\n","\n","  # Returns the length of the input similar to len().\n","  def c_len(self, input):\n","    if input.__class__ == str or input.__class__ == list:\n","      total = 0\n","      for i in input:\n","        total += 1\n","    elif input.__class__ == int or input.__class__ == float:\n","      print(\"TypeError: object of type 'int' has no len()\")\n","    return total\n","\n","  def c_replace(self, string, word, sub_word):\n","    # Input string and replace the word with the sub_word. Similar to Python's:\n","    # string.replace(word,subword)\n","    str_replace = \"\"\n","    word_len = len(word)\n","    str_len = len(string)\n","    count = 0\n","    for i in range(str_len-word_len+1):\n","      if string[count:word_len] == word:\n","        str_replace += sub_word\n","        count += len(word)\n","        word_len += len(word)\n","      else:\n","        str_replace += string[count]\n","        count += 1\n","        word_len += 1\n","    return str_replace\n","\n","  def filter_stop(self,column):\n","    # Filters the verb endings using c_replace(). Similar to the previous one liner:\n","    # activity_arr = [filter_word if x == filter_word + 'ing' or x == filter_word + 'ed' else x for x in self.data[6]]\n","    filtered_column = []\n","    for i in column:\n","      if 'Walked' in i:\n","        filtered_column.append(\"Walk\")\n","      elif 'Juggling' in i:\n","        filtered_column.append(\"Juggle\")\n","      elif 'Driving' in i:\n","        filtered_column.append(\"Drive\")\n","      elif i == 'Lifts':\n","        # Could append since this is hard coded but I wanted to test.\n","        verb_less = self.c_replace(i, \"s\", \"\")\n","        filtered_column.append(verb_less)\n","      elif 'ing' in i:\n","        verb_less = self.c_replace(i, \"ing\", \"\")\n","        filtered_column.append(verb_less)\n","      else:\n","        filtered_column.append(i)\n","    return filtered_column\n","\n","  # Calculates duration using end - start.\n","  def sort_time(self,activity,start,end):\n","    duration = ['Duration']\n","    for i in range(1,len(start)):\n","      # Checks to see if the Activity or Start column is empty.\n","      if len(activity[i]) == 0 or len(start[i]) == 0:\n","        continue\n","      # Estimates sleep at 7 hours.\n","      elif 'Sleep' == activity[i]:\n","        duration.append(str(7*60))\n","      else:\n","        # Gets the hour.\n","        if len(end[i]) > 3:\n","          end_sub = end[i][:2]\n","        else:\n","          end_sub = end[i][0]\n","        if len(start[i]) > 3:\n","          start_sub = start[i][:2]\n","        else:\n","          start_sub = start[i][0]\n","        # Subtracts 40 minutes since there are 60 in an hour not 100.\n","        if start_sub == end_sub:\n","          duration.append(str(int(end[i]) - int(start[i])))\n","        else:\n","          hunid = (int(end_sub) - int(start_sub)) * 40\n","          duration.append(str((int(end[i]) - int(start[i])) - hunid))\n","    return duration\n","\n","  # def sort_ascii(self,time_ID,ord_list,activity_filter,duration):\n","  def sort_ascii(self,ord_list,activity_filter,time_ID,duration):\n","    length = len(time_ID) - 1\n","    step = 1\n","    while step < length:\n","      for i in range(1, length, 2 * step):\n","        # Time vs space trade off: if you want less space calculate the duration\n","        # with another loop before sorting. Otherwise, the End and Start columns\n","        # are included in sorting and space is linear * number of columns (4).\n","        left = [ord_list[i:i + step],activity_filter[i:i + step], time_ID[i:i + step], duration[i:i + step]]\n","        right = [ord_list[i + step:i + 2 * step],\n","                 activity_filter[i + step:i + 2 * step], time_ID[i + step:i + 2 * step], duration[i + step:i + 2 * step]]\n","        merged = self.merge(left, right)\n","        # Place the merged array back into the original array\n","        for j in range(len(merged[0])):\n","          ord_list[i + j] = merged[0][j]\n","          activity_filter[i + j] = merged[1][j]\n","          time_ID[i + j] = merged[2][j]\n","          duration[i + j] = merged[3][j]\n","      step *= 2  # Double the sub-array length for the next iteration\n","    return [ord_list,activity_filter,time_ID,duration]\n","\n","  def sort_bubble(self,sort_ascii):\n","    # https://www.w3schools.com/dsa/dsa_algo_bubblesort.php\n","\n","    number = len(sort_ascii[0])\n","    count = len(sort_ascii[0]) - 1\n","    sort_bubble = []\n","\n","    # Building sort_ascii avoids a function data leak between sort_ascii and sort_bubble.\n","    for x in range(len(sort_ascii)):\n","      sort_bubble_column = []\n","      for y in range(len(sort_ascii[0])):\n","        sort_bubble_column.append(sort_ascii[x][y])\n","      sort_bubble.append(sort_bubble_column)\n","\n","    # ord_list,activity_filter,time_ID,duration\n","\n","    for i in range(1,number-1):\n","      swapped = False\n","      for j in range(1,number-i-1):\n","        # Length of the shorter of the two comparison words.\n","        if len(sort_bubble[1][j]) < len(sort_bubble[1][j+1]):\n","          length = len(sort_bubble[1][j])\n","        else:\n","          length = len(sort_bubble[1][j+1])\n","        for k in range(1,length):\n","          # Two words are extended to the 'length' of the shortest of the two\n","          # comparison words while checking if they are the same [:k]. If the\n","          # ASCII number at [k] of the first word is greater than the second,\n","          # switch the elements. Doesn't work for same first word, and\n","          # an extra word on the second word: 'Walk' and 'Walk Run' since\n","          # it's the length of the shortest word.\n","\n","          #print(length, sort_bubble[1][j][:k], sort_bubble[1][j+1][:k], ord(sort_bubble[1][j][k]), ord(sort_bubble[1][j+1][k]))\n","          if sort_bubble[1][j][:k] == sort_bubble[1][j+1][:k] and ord(sort_bubble[1][j][k]) > ord(sort_bubble[1][j+1][k]):\n","            sort_bubble[0][j], sort_bubble[0][j+1] = sort_bubble[0][j+1], sort_bubble[0][j]\n","            sort_bubble[1][j], sort_bubble[1][j+1] = sort_bubble[1][j+1], sort_bubble[1][j]\n","            sort_bubble[2][j], sort_bubble[2][j+1] = sort_bubble[2][j+1], sort_bubble[2][j]\n","            sort_bubble[3][j], sort_bubble[3][j+1] = sort_bubble[3][j+1], sort_bubble[3][j]\n","\n","            swapped = True\n","      # There's not a comparison for the last element in ascii_sort,\n","      # 'Walk' is appended to the end instead of moving\n","      # up the list ahead of the 'Wrench'.\n","      if ord(sort_bubble[1][count][0]) == ord(sort_bubble[1][count-1][0]) and ord(sort_bubble[1][count][1]) < ord(sort_bubble[1][count-1][1]):\n","        sort_bubble[0][count], sort_bubble[0][count-1] = sort_bubble[0][count-1], sort_bubble[0][count]\n","        sort_bubble[1][count], sort_bubble[1][count-1] = sort_bubble[1][count-1], sort_bubble[1][count]\n","        sort_bubble[2][count], sort_bubble[2][count-1] = sort_bubble[2][count-1], sort_bubble[2][count]\n","        sort_bubble[3][count], sort_bubble[3][count-1] = sort_bubble[3][count-1], sort_bubble[3][count]\n","        count -= 1\n","      if not swapped:\n","        break\n","    return sort_bubble\n","\n","  # Returns the time_id and unique activity lists\n","  def sort_unique_words(self,activity_col):\n","    # A0_length is 0-225\n","    activity_unique = []\n","    # Unique words in Activity\n","    for i in range(len(activity_col)):\n","      if activity_col[i] not in activity_unique:\n","        if len(activity_col[i]) == 0:\n","          continue\n","        else:\n","          activity_unique.append(activity_col[i])\n","    return activity_unique\n","\n","  def sort_unique_bin(self,activity_unique,sort_ascii):\n","    # todo bin each value with the output from rgb_unique_words\n","    return\n","\n","##############################################################################\n","# Part Z: Run the functions                                                  #\n","##############################################################################\n","\n","# Part A: The path of the CSV to be parsed\n","def CSV_running(path,unflipped_col):\n","  # Create the CSV_Parser class object and open the files\n","  parser = CSV_Parser(path)\n","  read = parser.file_opener()\n","  # Index the comma position from the CSV and split the characters into their values\n","  comma_indexed = parser.comma_index(read, path, 0)\n","  # Get the width of columns of the commas\n","  comma_width = parser.comma_index(read, path, 1)\n","  # Sort the list into verticle columns\n","  # The P0 csv gets flipped, except for the Stm column\n","  # Divide by two - the list of comma places is doubled for the start/end value\n","  col_width = int(((comma_width - 1 ) / 2) - 1)\n","  vert = []\n","  for i in range(0,comma_width-1,2):\n","    value_list = parser.csv_value_list(comma_indexed, read, col_width, i)\n","    if unflipped_col == 0:\n","      vert.append(value_list)\n","    else:\n","      if value_list[0] in unflipped_col:\n","        vert.append(value_list)\n","      else:\n","        flip = parser.csv_flipper(value_list, col_width)\n","        vert.append(flip)\n","  return vert\n","\n","# One month of May, 2024 observations\n","P0_path = \"/content/P0.csv\"\n","B0_path = \"/content/B0.csv\"\n","# A0 is a TSV because there are blank cells\n","A0_path = \"/content/A0.tsv\"\n","P0_unflipped_col = ['ID','Date','Day','Stm']\n","# P0_vert = CSV_running(P0_path,P0_unflipped_col)\n","# B0_vert = CSV_running(B0_path,0)\n","A0_vert = CSV_running(A0_path,0)\n","# Four months of July-October observations\n","# P1.csv contains the pain scale and B1.csv contains the food records\n","# P1_path = \"/content/P1-Observations-PaperFigures.csv\"\n","# B1_path = \"/content/B1.csv\"\n","# A1 is a tsv because of blank cells\n","A1_path = \"/content/A1.tsv\"\n","# List of columns to not be flipepd\n","# P1_unflipped_col = ['ID','Date','Day','Stm','Notes','Notes2']\n","# P1_vert = CSV_running(P1_path,P1_unflipped_col)\n","# B1_vert = CSV_running(B1_path,0)\n","# A1_vert = CSV_running(A1_path,0)\n","\n","# Part B: Get descriptive statistics\n","def stats_def(P1_vert,B1_vert):\n","  stats_class = Statistics()\n","  # The first three columns are skipped because they are ID, Date, and Day\n","  # These two loops calculate the means and moments\n","  P1_means_list = []\n","  P1_stnd_list = []\n","  B1_means_list = []\n","  B1_stnd_list = []\n","  # secondary todo: might make these functions\n","  for l in P1_vert[3:]:\n","    P1_means = stats_class.mu(l)\n","    P1_means_list.append(P1_means)\n","    P1_mnt2_4 = stats_class.mnt(P1_means[0],P1_means[1],l)\n","    P1_stnd_list.append(P1_mnt2_4[1])\n","  for m in B1_vert[2:]:\n","    B1_means = stats_class.mu(m)\n","    B1_means_list.append(B1_means)\n","    B1_mnt2_4 = stats_class.mnt(B1_means[0],B1_means[1],m)\n","    B1_stnd_list.append(B1_mnt2_4[1])\n","  # The nested loops calculates the covariance and correlations between B0 and P0\n","  for n in range(len(P1_vert[3:])):\n","    print(\"x: \", P1_vert[n+3][0])\n","    for o in range(len(B1_vert[2:])):\n","      print(\"    and \", B1_vert[o+2][0])\n","      P1B1_covar = stats_class.covar(P1_means_list[n],B1_means_list[o],P1_vert[n+3],B1_vert[o+2])\n","      P1B1_cor = stats_class.cor(P1B1_covar,P1_stnd_list[n],B1_stnd_list[o])\n","      print(P1B1_cor)\n","    print()\n","\n","# Part C: Data visualization ASCII\n","def P1_ASCII_graph(P1_vert):\n","  title_full = ['Stamina',\n","                'Feet','Ankle','Calves',\n","                'Knees','Quadriceps','Gluteus','Groin',\n","                'Abdominals','Lower Back',\n","                'Latissimus Dorsi','Trapezius','Shoulders',\n","                'Chest','Triceps','Biceps',\n","                'Neck','Head']\n","  graph_count = 3\n","  for p in P1_vert[3:]:\n","    #if graph_count == 4:\n","    #  break\n","    # Initialize graph class\n","    P1_graph = Graph(P1_vert, 1, graph_count)\n","    # ASCII Graphs\n","    # date_col_num = 1 # data_col_num = each successive column\n","    # this would be a loop over columns 3-20, 1st column is the date\n","    # print(p[0])\n","    # print()\n","    P1_hi_lo = P1_graph.hi_lo(graph_count)\n","    date_hi_lo = P1_graph.hi_lo(1)\n","    P1_binned = P1_graph.binned(P1_hi_lo)\n","    P1_time_series = P1_graph.time_series(date_hi_lo,P1_binned)\n","    # P1_graph.time_series_print(P1_time_series[0],P1_time_series[1])\n","    # P1_file_out = \"/content/P1_\" + p[0] + \".txt\"\n","    # P1_time_series_write = P1_graph.time_series_write(p[0],P1_file_out,P1_time_series[0],P1_time_series[1])\n","    # print(\"\\n\")\n","    graph_count += 1\n","\n","def B1_ASCII_graph(B1_vert):\n","  # Did not finish\n","  graph_count = 2\n","  for p in B1_vert[2:]:\n","    #if graph_count == 4:\n","    #  break\n","    # Initialize graph class\n","    B1_graph = Graph(B1_vert, 1, graph_count)\n","    # ASCII Graphs\n","    # date_col_num = 1 # data_col_num = each successive column\n","    # this would be a loop over columns 3-20, 1st column is the date\n","    # print(p[0])\n","    # print()\n","    B1_hi_lo = B1_graph.hi_lo(graph_count)\n","    date_hi_lo = B1_graph.hi_lo(1)\n","    B1_binned = B1_graph.binned(B1_hi_lo)\n","    B1_time_series = B1_graph.time_series(date_hi_lo,B1_binned)\n","    # B0_graph.time_series_print(B0_time_series[0],B0_time_series[1])\n","    # print()\n","    # B0_file_out = \"/content/B0_\" + p[0] + \".txt\"\n","    # B0_time_series_write = B0_graph.time_series_write(p[0],B0_file_out,B0_time_series[0],B0_time_series[1])\n","    # print(\"\\n\")\n","    graph_count += 1\n","\n","# Part D: Data visualization RGB\n","def P1_RGB_graph(P1_vert):\n","\n","  title_full = ['Stamina',\n","                'Feet','Ankle','Calves',\n","                'Knees','Quadriceps','Gluteus','Groin',\n","                'Abdominals','Lower Back',\n","                'Latissimus Dorsi','Trapezius','Shoulders',\n","                'Chest','Triceps','Biceps',\n","                'Neck','Head']\n","  P1_rgb = Graphs_rgb(P1_vert)\n","  P1_B1 = 0\n","  start_val = 3\n","  # Draws the bar charts\n","  P1_rgb_bar = P1_rgb.rgb_timeseries_bar(title_full,start_val,P1_B1)\n","  # RGB Line Graphs by Group\n","  # Uses the position of each body part name in the title_full list\n","  P1_groups_num = [3,4,7,11,13,16,19,21]\n","  P1_title_label = ['Stamina','Lower Legs','Upper Legs','Core','Upper Back','Arms','Head']\n","  # P1_rgb_line = P1_rgb.rgb_timeseries_line(title_full,start_val,P1_groups_num,P1_title_label,P1_B1)\n","\n","  # Line graphs by upper/lower body group means\n","  def small():\n","    csv_groups_list = [[3,4],[4,7,11,13],[13,16,19,21]]\n","    legend_label = [['Stamina'],['Lower Legs','Upper Legs','Core'],['Upper Back','Arms','Head']]\n","    k0 = 0\n","    for csv_groups_num in csv_groups_list:\n","      fig, ax = plt.subplots(1, 1, layout='constrained', figsize=(15, 5))\n","      P1_rgb_line_smallest = P1_rgb.rgb_timeseries_small(csv_groups_num,legend_label[k0],ax)\n","      # Plot formatting\n","      plt.margins()\n","      plt.grid()\n","      plt.yticks(range(1,6))\n","      if sum(csv_groups_num) == sum(csv_groups_list[1]):\n","        ax.legend()\n","        plt.title(\"Lower Body\")\n","        plt.ylabel(\"Pain\")\n","        #plt.savefig(\"Lower Body Pain.jpg\")\n","      elif sum(csv_groups_num) == sum(csv_groups_list[2]):\n","        ax.legend()\n","        plt.title(\"Upper Body\")\n","        plt.ylabel(\"Pain\")\n","        #plt.savefig(\"Upper Body Pain.jpg\")\n","      else:\n","        plt.ylabel(\"Stamina\")\n","        #plt.savefig(\"Stamina.jpg\")\n","      k0 += 1\n","\n","  # Smallest on one graph\n","  def smallest():\n","    # csv_groups_list = [[3,4],[4,12],[13,21]]\n","    # legend_label = [['Stamina'],['Lower Body'], ['Upper Body']]\n","    csv_groups_list = [[4,21]]\n","    legend_label = [['Pain']]\n","    fig, ax = plt.subplots(1, 1, layout='constrained', figsize=(15, 5))\n","    k1 = 0\n","    for csv_groups_num in csv_groups_list:\n","      P1_rgb_line_smallest = P1_rgb.rgb_timeseries_small(csv_groups_num,legend_label[k1],ax)\n","      k1 += 1\n","    # Plot formatting\n","    plt.margins()\n","    plt.grid()\n","    # plt.legend()\n","    plt.yticks(range(1,6))\n","    plt.ylabel(\"Pain\")\n","    plt.savefig('P1_smallerest.jpg')\n","  # small()\n","  # smallest()\n","\n","def B1_RGB_graph(B1_vert):\n","  title_full = ['Calories','Exercise',            # Group 0\n","              'Salt', 'Fat', 'Protein',           # Group 1\n","              'Carbohydrates', 'Alcohol Servings' # Group 3\n","              ]                                   # etc\n","  B1_rgb = Graphs_rgb(B1_vert)\n","  P1_B1 = 1\n","  start_val = 2\n","  # Part D RGB Graphs: B1.csv\n","  B1_rgb_bar = B1_rgb.rgb_timeseries_bar(title_full,start_val,P1_B1)\n","  # RGB Line Graphs by Group for B0.csv\n","  # Uses the position of each title in the title_full list\n","  B1_groups_num = [2,3,4,8,9]\n","  B1_title_label = ['Calories','Exercise','Nutrients','Alcohol Servings']\n","  # Line graph is not appropriate for calories, exercise, and alcohol servings\n","  #B1_rgb_line = B1_rgb.rgb_timeseries_line(title_full,start_val,B1_groups_num,B1_title_label,P1_B1)\n","\n","# A0_vert\n","def A0_RGB_graph(A0_vert):\n","  title_full = ['','',            # Group 0\n","              '', '',           # Group 1\n","              '', '','' # Group 3\n","              ]                                   # etc\n","  A0_sort = Graphs_sort(A0_vert)\n","  P1_B1 = 2\n","  start_val = 1\n","  # Part D RGB Graphs: A0.tsv\n","  A0_sort_duration = A0_sort.sort_time(A0_sort.data[6],A0_sort.data[4],A0_sort.data[5])\n","  A0_activity_filter = A0_sort.filter_stop(A0_sort.data[6])\n","\n","  # ord_list_0 = [0] + [ord(A0_activity_filter[x][0]) for x in range(1,len(A0_activity_filter))]\n","\n","  # sort_ascii =     self,time_ID,activity_filter,duration\n","\n","  ord_list = ['ord_list'] + [ord(A0_activity_filter[x][0]) for x in range(1,len(A0_activity_filter))]\n","  A0_sort_merged = A0_sort.sort_ascii(ord_list,A0_activity_filter,A0_sort.data[1],A0_sort_duration)\n","\n","  # A0_sort_bubble = A0_sort.sort_bubble(A0_sort_merged)\n","\n","  #for ii in range(len(A0_sort_merged[0])):\n","    #if A0_sort_merged[1][ii] != A0_sort_bubble[1][ii]:\n","    # print(A0_sort_merged[1][ii], A0_sort_bubble[1][ii])\n","    #print(A0_sort_bubble[1][ii])\n","\n","  # A0_sort_merged and A0_sort_bubble returns [time_ID,ord_list,activity_filter,duration]\n","\n","  #A0_sort_unique = A0_sort.sort_unique_words(A0_sort_sorted[1])\n","  #A0_sort_bin = A0_sort.sort_unique_bin(A0_sort_unique,A0_sort_sorted)\n","\n","  #A0_rgb_time = A0_rgb.rgb_time()\n","  #A0_rgb_duration = A0_rgb.rgb_duration(A0_rgb_unique_words,A0_rgb_time)\n","  # A0_rgb.rgb_date_list()\n","  # RGB Line Graphs by Group for B0.csv\n","  # Uses the position of each title in the title_full list\n","  # B1_groups_num = [2,3,4,8,9]\n","  # B1_title_label = ['Calories','Exercise','Nutrients','Alcohol Servings']\n","  # Line graph is not appropriate for calories, exercise, and alcohol servings\n","  # B1_rgb_line = B1_rgb.rgb_timeseries_line(title_full,start_val,B1_groups_num,B1_title_label,P1_B1)\n","\n","# A0_vert\n","def A1_RGB_graph(A0_vert):\n","  title_full = ['','',            # Group 0\n","              '', '',           # Group 1\n","              '', '','' # Group 3\n","              ]                                   # etc\n","  A1_rgb = Graphs_rgb(A1_vert)\n","  P1_B1 = 2\n","  start_val = 1\n","  # Part D RGB Graphs: A0.tsv\n","  filter_word = 'Walk'\n","  A1_rgb_unique_words = A1_rgb.rgb_unique_words(filter_word)\n","  A1_rgb_time = A1_rgb.rgb_time()\n","\n","  # A1_rgb_duration = A1_rgb.rgb_duration(A1_rgb_unique_words,A1_rgb_time)\n","  # A1_rgb.rgb_date_list()\n","  # RGB Line Graphs by Group for B0.csv\n","  # Uses the position of each title in the title_full list\n","  # B1_groups_num = [2,3,4,8,9]\n","  # B1_title_label = ['Calories','Exercise','Nutrients','Alcohol Servings']\n","  # Line graph is not appropriate for calories, exercise, and alcohol servings\n","  # B1_rgb_line = B1_rgb.rgb_timeseries_line(title_full,start_val,B1_groups_num,B1_title_label,P1_B1)\n","# P1_RGB_graph(P1_vert)\n","\n","# B1_RGB_graph(B1_vert)\n","A0_RGB_graph(A0_vert)\n","# A1_RGB_graph(A1_vert)"],"metadata":{"id":"IxtfVwAjhyaV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742757063050,"user_tz":300,"elapsed":245,"user":{"displayName":"David Leifer","userId":"06279506333224389759"}},"outputId":"a92917bd-fcb5-46ea-ed32-70df93c96345"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["3.11.11 (main, Dec  4 2024, 08:55:07) [GCC 11.4.0]\n","2 Stretch Dynamic warmup\n","1 Plyometrics Walk\n","2 Guitar Dynamic warmup\n","1 Skateboard basement Lift\n","0 Wrench Wrench\n","2 Walk Guitar\n","1 RPI Firmware Guitar\n","0 Wrench Wrench\n","2 Rest Stretch\n","2 Rest Guitar\n","1 Dynamic warmup Wrench\n","1 Skateboard basement Run, walk\n","1 Stretch Rest\n","2 Guitar Stretch\n","3 Walk Rest\n","2 Juggle Stretch\n","3 Core Walk\n","2 Lotion Animation\n","2 Guitar Plyometrics\n","2 Run Rest\n","1 Guitar Read\n","1 Stretch Guitar\n","2 Read Skateboard outside\n","2 Walk Mobility\n","1 Animation Guitar\n","2 Stretch Dynamic warmup\n","1 Plyometrics Upperbody\n","1 Run, walk Rest\n","2 Rest Stretch\n","2 Rest Guitar\n","1 Skateboard basement Mobility\n","0 Mobility Mobility\n","2 Read Guitar\n","2 Walk Rugby\n","2 Guitar Stretch\n","1 Mobility Guitar\n","3 Walk Read\n","1 Mobility Walk\n","1 Guitar Walk\n","2 Mobility Skateboard outside\n","3 Rest Read\n","1 Ollie Notes Guitar\n","1 Guitar Read\n","2 Read Skateboard basement\n","1 Dynamic warmup Mobility\n","1 Cool down Shower\n","2 Eat Rest\n","3 Read Rest\n","2 Read Drive\n","0 Mobility Mobility\n","2 Read Cleaned room\n","0 Mobility Mobility\n","2 Guitar Mobility\n","2 Walk Skateboard basement\n","0 Skateboard outside Skateboard outside\n","2 Eat Read\n","0 Guitar Guitar\n","3 Walk Cook\n","2 Eat 0 Coffee\n","1 Guitar 0 Relax\n","1 Pre exercise test Plyometrics 0\n","3 Mobility 0.0 Mobility 1.0\n","3 Mobility 2.0 Mobility 3.0\n","1 Rest 0 Walk\n","1 Eat 1 Read\n","2 Tests Guitar 2, Rest 1\n","2 Walk Sleep\n","3 Coffee Guitar\n","2 Relax Pre exercise test\n","2 Juggle Skateboard basement\n","2 Cook Rest 0\n","1 Read Eat\n","2 Tests Guitar 2, Rest 1\n","2 Sleep Coffee\n","2 Eat Mobility 0.1\n","2 Relax Longboard\n","2 Rest 0 Mobility 3.1\n","2 Sleep Guitar\n","2 Eat Guitar 2, Rest 1\n","1 Sleep Eat\n","3 Coffee Guitar\n","1 Computer Eat\n","2 Relax Mobility\n","2 Lift Longboard 0\n","1 Cook Eat\n","0 Eat Eat\n","1 Guitar 2, Rest 1 Sleep\n","2 Eat Coffee\n","1 Guitar Relax\n","1 Pre exercise test Plyometrics 1\n","1 Lift Eat\n","1 Rest 0 Eat\n","1 Guitar 2, Rest 1 Sleep\n","2 Eat Coffee\n","2 Guitar Pre exercise test\n","1 Skateboard outside Eat\n","3 Juggle Rest 0\n","1 Read Eat\n","1 Guitar 2, Rest 1 Sleep\n","2 Eat Coffee\n","1 Read Eat\n","1 Guitar 0 Eat\n","3 Rest 0 Juggle\n","2 Rest 1 Guitar 1\n","2 Eat Rest 2\n","2 Sleep Juggle\n","1 Skateboard basement Juggle\n","1 Guitar 1 Juggle\n","1 Longboard Guitar 1\n","2 Run Guitar 0\n","1 Plyometrics Longboard\n","3 Guitar 1 Guitar 0\n","1 Plyometrics Juggle\n","1 Dynamic warmup Plyometrics\n","2 Stretch Plyometrics\n","1 Stretch Walk\n","1 Dynamic warmup Lift\n","1 Guitar Lift\n","3 Wrench Guitar\n","1 Wrench Walk\n","3 Guitar Wrench\n","1 RPI Firmware Wrench\n","2 Rest Guitar\n","0 Rest Rest\n","1 Dynamic warmup Run, walk\n","2 Wrench Run, walk\n","2 Wrench Skateboard basement\n","2 Rest Guitar\n","2 Rest Stretch\n","0 Stretch Stretch\n","2 Rest Juggle\n","2 Rest Stretch\n","2 Walk Stretch\n","2 Core Animation\n","2 Core Lotion\n","2 Walk Lotion\n","1 Guitar Rest\n","1 Plyometrics Rest\n","0 Guitar Guitar\n","2 Guitar Stretch\n","2 Read Stretch\n","2 Read Mobility\n","3 Read Walk\n","1 Skateboard outside Walk\n","2 Animation Dynamic warmup\n","2 Guitar Dynamic warmup\n","2 Guitar Stretch\n","1 Plyometrics Rest\n","1 Upperbody Rest\n","3 Upperbody Run, walk\n","2 Rest Guitar\n","0 Rest Rest\n","0 Mobility Mobility\n","0 Mobility Mobility\n","1 Guitar Rugby\n","2 Read Rugby\n","3 Read Walk\n","0 Guitar Guitar\n","2 Guitar Mobility\n","2 Stretch Mobility\n","2 Read Mobility\n","3 Read Walk\n","0 Walk Walk\n","2 Guitar Mobility\n","2 Walk Mobility\n","2 Walk Skateboard outside\n","2 Read Guitar\n","2 Read Ollie Notes\n","1 Guitar Read\n","0 Read Read\n","2 Read Skateboard basement\n","1 Dynamic warmup Cool down\n","1 Dynamic warmup Shower\n","1 Mobility Shower\n","2 Eat Rest\n","0 Rest Rest\n","3 Rest Read\n","2 Drive Mobility\n","2 Read Mobility\n","2 Read Mobility\n","1 Cleaned room Mobility\n","2 Read Mobility\n","2 Read Mobility\n","2 Guitar Skateboard basement\n","2 Mobility Skateboard basement\n","1 Skateboard outside Eat\n","1 Skateboard outside Read\n","1 Guitar Cook\n","1 Guitar Walk\n","1 Guitar Walk\n","2 Coffee Guitar 0\n","2 Eat 0 Guitar 0\n","1 Plyometrics 0 Mobility 1.0\n","1 Plyometrics 0 Mobility 0.0\n","1 Mobility 3.0 Rest 0\n","1 Mobility 2.0 Rest 0\n","2 Eat 1 Guitar 2, Rest 1\n","2 Read Guitar 2, Rest 1\n","2 Read Tests\n","2 Sleep Coffee\n","2 Sleep Guitar\n","1 Pre exercise test Juggle\n","2 Pre exercise test Skateboard basement\n","2 Relax Skateboard basement\n","1 Cook Eat\n","1 Rest 0 Eat\n","1 Rest 0 Read\n","1 Guitar 2, Rest 1 Coffee\n","1 Guitar 2, Rest 1 Sleep\n","3 Tests Sleep\n","2 Eat Longboard\n","1 Mobility 0.1 Longboard\n","1 Mobility 0.1 Relax\n","1 Mobility 3.1 Guitar\n","1 Mobility 3.1 Sleep\n","1 Rest 0 Sleep\n","0 Eat Eat\n","2 Eat Sleep\n","1 Guitar 2, Rest 1 Sleep\n","2 Coffee Computer\n","1 Coffee Eat\n","1 Guitar Eat\n","2 Mobility Longboard 0\n","1 Mobility Lift\n","1 Cook Eat\n","0 Eat Eat\n","0 Eat Eat\n","1 Guitar 2, Rest 1 Coffee\n","1 Guitar 2, Rest 1 Eat\n","2 Guitar Plyometrics 1\n","2 Relax Plyometrics 1\n","2 Relax Pre exercise test\n","0 Eat Eat\n","2 Eat Rest 0\n","2 Lift Rest 0\n","1 Guitar 2, Rest 1 Coffee\n","1 Guitar 2, Rest 1 Eat\n","1 Guitar Eat\n","2 Guitar Skateboard outside\n","2 Pre exercise test Skateboard outside\n","1 Juggle Eat\n","1 Juggle Read\n","1 Rest 0 Read\n","1 Guitar 2, Rest 1 Coffee\n","1 Guitar 2, Rest 1 Eat\n","0 Eat Eat\n","2 Eat Guitar 0\n","2 Read Guitar 0\n","2 Juggle Guitar 1\n","3 Juggle Rest 1\n","3 Rest 0 Rest 1\n","2 Eat Juggle\n","3 Rest 2 Juggle\n","1 Rest 2 Sleep\n","2 Juggle Guitar 1\n","0 Juggle Juggle\n","3 Guitar 1 Guitar 0\n","1 Guitar 1 Run\n","1 Longboard Run\n","1 Longboard Guitar 0\n","1 Longboard Guitar 1\n","2 Juggle Guitar 1\n","0 Dynamic warmup Dynamic warmup\n","1 Dynamic warmup Guitar\n","1 Plyometrics Guitar\n","1 Plyometrics Lift\n","2 Plyometrics Skateboard basement\n","2 Stretch Skateboard basement\n","0 Guitar Guitar\n","2 Guitar RPI Firmware\n","2 Walk RPI Firmware\n","2 Walk Wrench\n","2 Walk Wrench\n","2 Guitar Dynamic warmup\n","2 Guitar Run, walk\n","2 Rest Run, walk\n","2 Rest Skateboard basement\n","2 Rest Skateboard basement\n","2 Stretch Skateboard basement\n","1 Stretch Wrench\n","3 Guitar Juggle\n","2 Rest Juggle\n","0 Rest Rest\n","2 Rest Stretch\n","0 Stretch Stretch\n","1 Stretch Walk\n","1 Stretch Walk\n","1 Animation Guitar\n","2 Core Guitar\n","3 Lotion Guitar\n","2 Lotion Plyometrics\n","2 Walk Plyometrics\n","3 Walk Rest\n","1 Walk Run\n","2 Guitar Mobility\n","2 Guitar Mobility\n","2 Read Mobility\n","0 Read Read\n","2 Read Skateboard outside\n","2 Stretch Skateboard outside\n","1 Stretch Walk\n","2 Animation Plyometrics\n","1 Dynamic warmup Plyometrics\n","2 Guitar Plyometrics\n","2 Stretch Plyometrics\n","1 Stretch Rest\n","2 Stretch Run, walk\n","2 Stretch Upperbody\n","2 Guitar Mobility\n","2 Rest Mobility\n","2 Rest Mobility\n","2 Rest Mobility\n","2 Rest Skateboard basement\n","2 Rest Skateboard basement\n","2 Stretch Skateboard basement\n","0 Guitar Guitar\n","0 Guitar Guitar\n","2 Guitar Mobility\n","2 Rugby Mobility\n","2 Rugby Stretch\n","2 Read Stretch\n","2 Walk Stretch\n","1 Mobility Guitar\n","0 Mobility Mobility\n","2 Mobility Skateboard outside\n","2 Read Skateboard outside\n","2 Walk Skateboard outside\n","0 Walk Walk\n","0 Guitar Guitar\n","1 Guitar Read\n","1 Ollie Notes Read\n","0 Read Read\n","0 Read Read\n","2 Read Skateboard basement\n","2 Rest Skateboard basement\n","1 Cool down Eat\n","1 Dynamic warmup Eat\n","1 Mobility Eat\n","1 Mobility Rest\n","1 Shower Rest\n","1 Shower Read\n","1 Shower Rest\n","2 Drive Cleaned room\n","2 Drive Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","1 Mobility Read\n","1 Mobility Read\n","0 Read Read\n","1 Guitar Eat\n","1 Guitar Read\n","1 Mobility Read\n","1 Skateboard basement Read\n","1 Skateboard basement Skateboard outside\n","1 Skateboard basement Skateboard outside\n","2 Cook Coffee\n","2 Cook Eat 0\n","1 Guitar Eat 0\n","5 Guitar Guitar 0\n","1 Guitar Relax\n","1 Guitar Relax\n","2 Walk Relax\n","3 Mobility 1.0 Mobility 3.0\n","3 Mobility 1.0 Mobility 2.0\n","1 Mobility 1.0 Rest 0\n","1 Mobility 0.0 Rest 0\n","1 Plyometrics 0 Rest 0\n","1 Pre exercise test Rest 0\n","2 Eat 1 Coffee\n","2 Eat 1 Guitar\n","4 Guitar 2, Rest 1 Guitar\n","1 Guitar 2, Rest 1 Sleep\n","2 Read Sleep\n","3 Tests Sleep\n","1 Tests Walk\n","1 Juggle Cook\n","1 Juggle Eat\n","1 Juggle Read\n","1 Pre exercise test Read\n","1 Relax Read\n","2 Relax Rest 0\n","1 Coffee Eat\n","1 Guitar 2, Rest 1 Eat\n","1 Guitar 2, Rest 1 Longboard\n","2 Sleep Longboard\n","2 Sleep Mobility 0.1\n","3 Sleep Relax\n","1 Guitar Eat\n","1 Guitar Eat\n","5 Guitar Guitar 2, Rest 1\n","1 Guitar Sleep\n","1 Mobility 3.1 Sleep\n","1 Rest 0 Sleep\n","0 Sleep Sleep\n","2 Computer Longboard 0\n","2 Coffee Longboard 0\n","2 Eat Longboard 0\n","2 Guitar Longboard 0\n","2 Cook Coffee\n","1 Cook Eat\n","0 Eat Eat\n","2 Eat Guitar 2, Rest 1\n","2 Eat Guitar 2, Rest 1\n","2 Eat Guitar 2, Rest 1\n","1 Guitar Eat\n","1 Guitar Eat\n","1 Guitar Lift\n","1 Plyometrics 1 Lift\n","1 Plyometrics 1 Rest 0\n","1 Pre exercise test Rest 0\n","2 Relax Rest 0\n","1 Coffee Eat\n","0 Eat Eat\n","2 Eat Guitar\n","4 Guitar 2, Rest 1 Guitar\n","2 Guitar 2, Rest 1 Pre exercise test\n","2 Sleep Pre exercise test\n","2 Sleep Skateboard outside\n","2 Eat Coffee\n","0 Eat Eat\n","2 Eat Guitar 2, Rest 1\n","2 Juggle Guitar 2, Rest 1\n","1 Juggle Sleep\n","2 Read Sleep\n","1 Rest 0 Sleep\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","3 Guitar 0 Guitar 1\n","1 Guitar 0 Juggle\n","2 Read Juggle\n","2 Read Rest 1\n","2 Read Rest 0\n","2 Eat Guitar 1\n","2 Juggle Guitar 1\n","0 Juggle Juggle\n","0 Juggle Juggle\n","2 Juggle Skateboard basement\n","2 Rest 2 Skateboard basement\n","2 Sleep Skateboard basement\n","0 Guitar 0 Guitar 0\n","3 Guitar 0 Guitar 1\n","2 Guitar 0 Longboard\n","2 Guitar 1 Longboard\n","0 Longboard Longboard\n","2 Longboard Plyometrics\n","2 Run Plyometrics\n","1 Dynamic warmup Guitar\n","1 Dynamic warmup Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","2 Guitar RPI Firmware\n","2 Lift RPI Firmware\n","2 Plyometrics RPI Firmware\n","1 Skateboard basement RPI Firmware\n","1 Skateboard basement Wrench\n","1 Stretch Wrench\n","2 Walk Wrench\n","2 Walk Wrench\n","0 Walk Walk\n","2 Walk Wrench\n","2 Walk Wrench\n","1 Dynamic warmup Guitar\n","0 Guitar Guitar\n","3 Guitar Juggle\n","1 Run, walk Juggle\n","1 Run, walk Rest\n","1 Run, walk Rest\n","1 Run, walk Stretch\n","2 Rest Stretch\n","2 Rest Stretch\n","1 Skateboard basement Stretch\n","1 Skateboard basement Stretch\n","1 Skateboard basement Stretch\n","1 Skateboard basement Walk\n","1 Stretch Walk\n","1 Wrench Walk\n","1 Animation Guitar\n","2 Core Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","2 Guitar Mobility\n","2 Lotion Mobility\n","1 Plyometrics Mobility\n","1 Plyometrics Read\n","3 Rest Read\n","3 Rest Read\n","2 Rest Skateboard outside\n","2 Run Skateboard outside\n","2 Walk Skateboard outside\n","2 Walk Stretch\n","0 Walk Walk\n","1 Animation Guitar\n","1 Dynamic warmup Guitar\n","0 Guitar Guitar\n","2 Guitar Mobility\n","1 Plyometrics Mobility\n","1 Plyometrics Mobility\n","1 Plyometrics Mobility\n","1 Plyometrics Rest\n","0 Rest Rest\n","0 Rest Rest\n","2 Rest Skateboard basement\n","2 Run, walk Skateboard basement\n","2 Stretch Skateboard basement\n","0 Stretch Stretch\n","0 Guitar Guitar\n","2 Guitar Mobility\n","2 Guitar Mobility\n","2 Guitar Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","1 Mobility Read\n","1 Rugby Read\n","2 Rugby Skateboard outside\n","2 Read Skateboard outside\n","2 Stretch Skateboard outside\n","1 Stretch Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Walk Walk\n","2 Guitar Cool down\n","2 Guitar Dynamic warmup\n","1 Guitar Eat\n","2 Guitar Mobility\n","2 Guitar Mobility\n","1 Ollie Notes Mobility\n","1 Ollie Notes Rest\n","3 Read Rest\n","0 Read Read\n","3 Read Rest\n","2 Read Shower\n","2 Read Shower\n","2 Read Shower\n","2 Rest Shower\n","1 Skateboard basement Shower\n","1 Cleaned room Eat\n","1 Drive Eat\n","1 Mobility Eat\n","1 Mobility Guitar\n","0 Mobility Mobility\n","1 Mobility Read\n","1 Mobility Read\n","1 Mobility Read\n","1 Mobility Read\n","0 Read Read\n","2 Read Skateboard outside\n","2 Read Skateboard outside\n","2 Coffee Mobility 3.0\n","2 Cook Mobility 3.0\n","2 Eat 0 Mobility 3.0\n","2 Guitar 0 Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Relax Mobility 3.0\n","2 Relax Mobility 2.0\n","2 Relax Mobility 1.0\n","2 Relax Mobility 0.0\n","2 Relax Plyometrics 0\n","2 Relax Pre exercise test\n","2 Relax Rest 0\n","1 Relax Walk\n","0 Walk Walk\n","1 Coffee Cook\n","1 Coffee Eat\n","4 Eat 1 Eat\n","2 Eat 1 Juggle\n","3 Guitar Juggle\n","1 Guitar 2, Rest 1 Juggle\n","2 Read Juggle\n","2 Read Pre exercise test\n","0 Read Read\n","2 Read Rest 0\n","2 Read Relax\n","2 Read Skateboard basement\n","2 Sleep Skateboard basement\n","1 Coffee Eat\n","0 Eat Eat\n","0 Eat Eat\n","2 Eat Guitar 2, Rest 1\n","0 Guitar 2, Rest 1 Guitar 2, Rest 1\n","4 Guitar 2, Rest 1 Guitar\n","1 Guitar 2, Rest 1 Mobility 3.1\n","2 Longboard Mobility 3.1\n","3 Mobility 0.1 Mobility 3.1\n","1 Mobility 0.1 Rest 0\n","2 Relax Rest 0\n","3 Relax Sleep\n","0 Sleep Sleep\n","0 Sleep Sleep\n","1 Computer Coffee\n","1 Computer Cook\n","1 Computer Eat\n","1 Coffee Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","2 Eat Guitar 2, Rest 1\n","5 Guitar Guitar 2, Rest 1\n","1 Guitar Sleep\n","1 Longboard 0 Sleep\n","2 Lift Sleep\n","1 Mobility Sleep\n","3 Relax Sleep\n","2 Eat Coffee\n","0 Eat Eat\n","0 Eat Eat\n","2 Eat Guitar\n","2 Eat Guitar\n","0 Guitar Guitar\n","5 Guitar Guitar 2, Rest 1\n","2 Guitar Pre exercise test\n","2 Lift Pre exercise test\n","2 Plyometrics 1 Pre exercise test\n","2 Plyometrics 1 Skateboard outside\n","2 Pre exercise test Skateboard outside\n","2 Rest 0 Skateboard outside\n","2 Relax Skateboard outside\n","1 Coffee Eat\n","0 Eat Eat\n","0 Eat Eat\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","1 Guitar 2, Rest 1 Guitar 1\n","1 Guitar 2, Rest 1 Guitar 0\n","1 Guitar 2, Rest 1 Juggle\n","0 Juggle Juggle\n","3 Juggle Rest 1\n","2 Read Rest 1\n","2 Read Rest 0\n","0 Read Read\n","2 Eat Guitar 0\n","3 Guitar 1 Guitar 0\n","0 Guitar 1 Guitar 1\n","3 Guitar 1 Guitar 0\n","0 Guitar 1 Guitar 1\n","2 Guitar 1 Longboard\n","2 Juggle Longboard\n","2 Juggle Longboard\n","2 Juggle Longboard\n","2 Rest 2 Longboard\n","2 Rest 2 Longboard\n","2 Rest 2 Plyometrics\n","1 Rest 2 Run\n","0 Dynamic warmup Dynamic warmup\n","1 Dynamic warmup Guitar\n","1 Dynamic warmup Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","2 Lift Juggle\n","3 Lift Rest\n","1 Plyometrics Rest\n","1 RPI Firmware Rest\n","1 RPI Firmware Rest\n","1 RPI Firmware Run, walk\n","1 RPI Firmware Rest\n","1 RPI Firmware Rest\n","1 RPI Firmware Stretch\n","1 Skateboard basement Stretch\n","1 Skateboard basement Stretch\n","1 Skateboard basement Stretch\n","0 Skateboard basement Skateboard basement\n","1 Skateboard basement Stretch\n","1 Skateboard basement Walk\n","1 Stretch Walk\n","1 Wrench Walk\n","0 Wrench Wrench\n","0 Animation Animation\n","2 Animation Dynamic warmup\n","2 Core Dynamic warmup\n","2 Guitar Dynamic warmup\n","0 Guitar Guitar\n","0 Guitar Guitar\n","2 Guitar Mobility\n","2 Guitar Mobility\n","2 Guitar Mobility\n","2 Lotion Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","2 Mobility Plyometrics\n","0 Plyometrics Plyometrics\n","1 Plyometrics Rest\n","3 Read Rest\n","3 Read Rest\n","3 Read Rest\n","2 Read Run, walk\n","2 Read Skateboard basement\n","2 Read Skateboard basement\n","2 Rest Skateboard basement\n","2 Run Skateboard basement\n","2 Skateboard outside Skateboard basement\n","1 Skateboard outside Stretch\n","1 Skateboard outside Stretch\n","1 Skateboard outside Upperbody\n","2 Stretch Upperbody\n","2 Walk Upperbody\n","2 Guitar Cool down\n","2 Guitar Dynamic warmup\n","1 Guitar Eat\n","0 Guitar Guitar\n","0 Guitar Guitar\n","2 Guitar Mobility\n","2 Guitar Mobility\n","2 Guitar Mobility\n","2 Guitar Mobility\n","0 Mobility Mobility\n","2 Mobility Ollie Notes\n","2 Mobility Ollie Notes\n","2 Mobility Ollie Notes\n","2 Read Ollie Notes\n","3 Read Rest\n","0 Read Read\n","3 Read Rest\n","0 Read Read\n","0 Read Read\n","0 Read Read\n","3 Read Rest\n","2 Read Shower\n","2 Rugby Shower\n","2 Read Shower\n","1 Skateboard outside Shower\n","2 Skateboard outside Skateboard basement\n","1 Cleaned room Coffee\n","1 Cleaned room Cook\n","1 Cleaned room Eat 0\n","3 Drive Eat 0\n","5 Eat Eat 0\n","2 Eat Guitar 0\n","5 Guitar Guitar 0\n","0 Guitar Guitar\n","0 Guitar Guitar\n","2 Guitar Mobility 3.0\n","5 Mobility Mobility 3.0\n","5 Mobility Mobility 2.0\n","5 Mobility Mobility 1.0\n","5 Mobility Mobility 0.0\n","2 Mobility Plyometrics 0\n","2 Mobility Plyometrics 0\n","2 Mobility Plyometrics 0\n","2 Mobility Plyometrics 0\n","2 Mobility Plyometrics 0\n","2 Read Plyometrics 0\n","2 Read Pre exercise test\n","2 Read Rest 0\n","2 Read Relax\n","3 Read Walk\n","3 Read Walk\n","3 Read Walk\n","1 Skateboard outside Walk\n","1 Skateboard outside Walk\n","1 Skateboard basement Walk\n","0 Walk Walk\n","0 Walk Walk\n","2 Cook Coffee\n","1 Cook Eat\n","1 Coffee Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","2 Eat Guitar 2, Rest 1\n","2 Eat 1 Guitar 2, Rest 1\n","5 Guitar Guitar 2, Rest 1\n","0 Guitar Guitar\n","5 Guitar Guitar 2, Rest 1\n","2 Guitar Longboard\n","1 Guitar 2, Rest 1 Longboard\n","2 Juggle Longboard\n","1 Pre exercise test Longboard\n","1 Pre exercise test Mobility 3.1\n","1 Pre exercise test Mobility 0.1\n","1 Pre exercise test Rest 0\n","2 Read Rest 0\n","2 Read Relax\n","2 Read Sleep\n","1 Rest 0 Sleep\n","3 Relax Sleep\n","2 Read Sleep\n","1 Skateboard basement Sleep\n","1 Skateboard basement Sleep\n","1 Skateboard basement Sleep\n","1 Skateboard basement Tests\n","3 Sleep Tests\n","0 Tests Tests\n","0 Coffee Coffee\n","1 Coffee Eat\n","1 Cook Eat\n","1 Computer Eat\n","1 Coffee Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","2 Eat Guitar\n","2 Eat Guitar\n","2 Eat Guitar\n","2 Eat Guitar\n","2 Eat Guitar\n","4 Guitar 2, Rest 1 Guitar\n","0 Guitar 2, Rest 1 Guitar 2, Rest 1\n","4 Guitar 2, Rest 1 Guitar\n","1 Guitar 2, Rest 1 Lift\n","1 Guitar Lift\n","1 Longboard 0 Lift\n","2 Longboard 0 Pre exercise test\n","2 Lift Pre exercise test\n","2 Mobility Pre exercise test\n","2 Relax Pre exercise test\n","2 Relax Plyometrics 1\n","2 Relax Pre exercise test\n","2 Relax Rest 0\n","0 Relax Relax\n","2 Relax Skateboard outside\n","2 Sleep Skateboard outside\n","0 Sleep Sleep\n","1 Coffee Eat\n","0 Eat Eat\n","2 Eat Guitar 0\n","2 Eat Guitar 0\n","2 Eat Guitar 0\n","2 Eat Guitar 0\n","3 Guitar 1 Guitar 0\n","0 Guitar 1 Guitar 1\n","3 Guitar 1 Guitar 0\n","0 Guitar 1 Guitar 1\n","0 Guitar 1 Guitar 1\n","1 Guitar 1 Juggle\n","1 Guitar 0 Juggle\n","1 Guitar 2, Rest 1 Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","2 Juggle Longboard\n","2 Juggle Longboard\n","2 Rest 1 Longboard\n","2 Rest 1 Longboard\n","2 Rest 1 Plyometrics\n","1 Rest 1 Run\n","3 Rest 1 Rest 2\n","2 Rest 1 Skateboard basement\n","2 Rest 0 Skateboard basement\n","2 Read Skateboard basement\n","2 Read Skateboard basement\n","2 Rest 0 Skateboard basement\n","2 Sleep Skateboard basement\n","0 Sleep Sleep\n","1 Dynamic warmup Animation\n","1 Dynamic warmup Animation\n","1 Dynamic warmup Core\n","0 Dynamic warmup Dynamic warmup\n","1 Dynamic warmup Guitar\n","1 Dynamic warmup Guitar\n","1 Dynamic warmup Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","3 Guitar Lotion\n","3 Guitar Lotion\n","3 Guitar Lotion\n","3 Guitar Lotion\n","3 Guitar Lotion\n","3 Juggle Lotion\n","2 Lift Lotion\n","2 Lift Mobility\n","1 Plyometrics Mobility\n","1 Plyometrics Mobility\n","1 Plyometrics Mobility\n","1 Plyometrics Mobility\n","0 Plyometrics Plyometrics\n","0 Plyometrics Plyometrics\n","1 Plyometrics Rest\n","0 Rest Rest\n","0 Rest Rest\n","0 Rest Rest\n","2 Rest Run, walk\n","3 Rest Read\n","3 Rest Read\n","0 Rest Rest\n","1 Rest Run\n","2 Rest Skateboard basement\n","2 Rest Skateboard basement\n","2 Run, walk Skateboard basement\n","2 Rest Skateboard basement\n","2 Rest Skateboard basement\n","2 RPI Firmware Skateboard basement\n","2 Stretch Skateboard basement\n","0 Stretch Stretch\n","0 Stretch Stretch\n","2 Stretch Skateboard outside\n","0 Stretch Stretch\n","2 Stretch Upperbody\n","2 Stretch Upperbody\n","2 Stretch Upperbody\n","1 Skateboard basement Upperbody\n","2 Stretch Upperbody\n","1 Skateboard basement Upperbody\n","2 Stretch Upperbody\n","2 Walk Upperbody\n","0 Walk Walk\n","0 Walk Walk\n","1 Cool down Coffee\n","1 Cool down Cook\n","2 Cool down Cleaned room\n","1 Cool down Drive\n","1 Dynamic warmup Drive\n","1 Dynamic warmup Eat 0\n","5 Eat Eat 0\n","0 Eat Eat\n","2 Eat Guitar 0\n","5 Guitar Guitar 0\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","5 Mobility Mobility 3.0\n","5 Mobility Mobility 2.0\n","5 Mobility Mobility 1.0\n","5 Mobility Mobility 0.0\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","2 Mobility Plyometrics 0\n","2 Mobility Plyometrics 0\n","2 Mobility Plyometrics 0\n","2 Mobility Plyometrics 0\n","2 Ollie Notes Plyometrics 0\n","2 Rest Plyometrics 0\n","2 Rest Pre exercise test\n","5 Rest Rest 0\n","2 Rest Relax\n","3 Rest Read\n","3 Rest Read\n","3 Rest Read\n","2 Rest Skateboard outside\n","2 Read Skateboard outside\n","2 Rest Skateboard outside\n","2 Read Skateboard outside\n","2 Read Skateboard outside\n","2 Read Skateboard outside\n","2 Rest Skateboard outside\n","2 Read Skateboard outside\n","2 Rugby Skateboard outside\n","2 Read Skateboard outside\n","2 Shower Skateboard outside\n","2 Shower Skateboard outside\n","2 Shower Skateboard basement\n","1 Shower Walk\n","1 Skateboard basement Walk\n","1 Skateboard outside Walk\n","1 Stretch Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Coffee Coffee\n","0 Coffee Coffee\n","1 Coffee Cook\n","2 Coffee Computer\n","0 Coffee Coffee\n","1 Coffee Eat\n","1 Cook Eat\n","1 Coffee Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","2 Eat Guitar\n","2 Eat Guitar\n","2 Eat Guitar\n","2 Eat Guitar\n","2 Eat 1 Guitar\n","4 Guitar 2, Rest 1 Guitar\n","0 Guitar 2, Rest 1 Guitar 2, Rest 1\n","4 Guitar 2, Rest 1 Guitar\n","0 Guitar 2, Rest 1 Guitar 2, Rest 1\n","4 Guitar 2, Rest 1 Guitar\n","1 Guitar 2, Rest 1 Lift\n","1 Guitar Lift\n","1 Guitar 2, Rest 1 Lift\n","1 Guitar Lift\n","1 Guitar 2, Rest 1 Lift\n","1 Juggle Lift\n","1 Longboard Lift\n","5 Longboard Longboard 0\n","1 Longboard Lift\n","1 Longboard Mobility\n","4 Mobility 3.1 Mobility\n","2 Mobility 3.1 Pre exercise test\n","2 Mobility 0.1 Pre exercise test\n","0 Pre exercise test Pre exercise test\n","1 Pre exercise test Plyometrics 1\n","0 Pre exercise test Pre exercise test\n","1 Pre exercise test Rest 0\n","0 Rest 0 Rest 0\n","1 Rest 0 Relax\n","1 Rest 0 Relax\n","2 Rest 0 Skateboard outside\n","2 Relax Skateboard outside\n","2 Read Skateboard outside\n","2 Rest 0 Skateboard outside\n","2 Relax Skateboard outside\n","2 Read Skateboard outside\n","2 Sleep Skateboard outside\n","0 Sleep Sleep\n","0 Sleep Sleep\n","2 Coffee Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","3 Guitar 0 Guitar 1\n","1 Guitar 0 Juggle\n","1 Guitar 1 Juggle\n","1 Guitar 0 Juggle\n","1 Guitar 1 Juggle\n","1 Guitar 1 Juggle\n","1 Guitar 1 Juggle\n","1 Guitar 0 Juggle\n","1 Guitar 2, Rest 1 Juggle\n","0 Juggle Juggle\n","2 Juggle Plyometrics\n","2 Juggle Plyometrics\n","2 Juggle Plyometrics\n","2 Juggle Plyometrics\n","2 Juggle Plyometrics\n","2 Longboard Plyometrics\n","2 Longboard Plyometrics\n","0 Plyometrics Plyometrics\n","1 Animation Coffee\n","1 Animation Coffee\n","2 Core Coffee\n","3 Core Cook\n","2 Core Cleaned room\n","2 Core Cool down\n","2 Core Drive\n","1 Dynamic warmup Drive\n","0 Dynamic warmup Dynamic warmup\n","1 Dynamic warmup Eat 0\n","1 Dynamic warmup Eat 0\n","1 Dynamic warmup Eat 0\n","1 Dynamic warmup Eat 0\n","1 Guitar Eat 0\n","1 Guitar Eat\n","1 Guitar Eat\n","5 Guitar Guitar 0\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","0 Guitar Guitar\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Guitar Mobility 3.0\n","2 Juggle Mobility 3.0\n","2 Lotion Mobility 3.0\n","2 Lift Mobility 3.0\n","5 Mobility Mobility 3.0\n","5 Mobility Mobility 2.0\n","5 Mobility Mobility 1.0\n","5 Mobility Mobility 0.0\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","0 Mobility Mobility\n","2 Mobility Ollie Notes\n","2 Mobility Ollie Notes\n","2 Mobility Ollie Notes\n","2 Mobility Ollie Notes\n","3 Plyometrics Ollie Notes\n","5 Plyometrics Plyometrics 0\n","2 Plyometrics Pre exercise test\n","1 Plyometrics Rest 0\n","1 Plyometrics Rest 0\n","1 Plyometrics Rest 0\n","5 Rest Rest 0\n","2 Rest Relax\n","3 Rest Read\n","3 Rest Read\n","3 Rest Read\n","0 Rest Rest\n","3 Rest Read\n","0 Rest Rest\n","3 Rest Read\n","3 Rest Read\n","3 Rest Read\n","0 Rest Rest\n","3 Rest Read\n","2 Rest Rugby\n","3 Rest Read\n","2 Rest Skateboard outside\n","2 Rest Skateboard outside\n","2 Rest Skateboard outside\n","2 Run, walk Skateboard outside\n","2 Read Skateboard outside\n","2 Read Skateboard outside\n","2 Rest Skateboard outside\n","2 Run Skateboard outside\n","2 Rest Skateboard outside\n","2 Rest Skateboard outside\n","2 Run, walk Skateboard outside\n","2 Rest Skateboard outside\n","2 Rest Skateboard outside\n","2 RPI Firmware Skateboard outside\n","1 Skateboard basement Skateboard outside\n","1 Skateboard basement Skateboard outside\n","0 Skateboard basement Skateboard basement\n","1 Skateboard basement Shower\n","0 Skateboard basement Skateboard basement\n","1 Skateboard basement Skateboard outside\n","1 Skateboard basement Stretch\n","1 Skateboard basement Walk\n","1 Stretch Walk\n","1 Stretch Walk\n","1 Skateboard outside Walk\n","1 Stretch Walk\n","1 Stretch Walk\n","1 Stretch Walk\n","1 Stretch Walk\n","1 Skateboard basement Walk\n","1 Stretch Walk\n","1 Skateboard basement Walk\n","1 Stretch Walk\n","1 Upperbody Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Walk Walk\n","0 Coffee Coffee\n","1 Coffee Eat\n","1 Coffee Eat\n","1 Cook Eat\n","1 Computer Eat\n","1 Coffee Eat\n","1 Coffee Eat\n","1 Cook Eat\n","1 Coffee Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","0 Eat Eat\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","2 Eat 1 Guitar 1\n","5 Guitar Guitar 1\n","5 Guitar Guitar 0\n","5 Guitar Guitar 1\n","5 Guitar Guitar 0\n","5 Guitar Guitar 1\n","5 Guitar Guitar 1\n","5 Guitar Guitar 1\n","5 Guitar Guitar 0\n","5 Guitar Guitar 2, Rest 1\n","3 Guitar Juggle\n","1 Guitar 2, Rest 1 Juggle\n","3 Guitar Juggle\n","1 Guitar 2, Rest 1 Juggle\n","3 Guitar Juggle\n","1 Guitar 2, Rest 1 Juggle\n","3 Guitar Juggle\n","1 Guitar 2, Rest 1 Juggle\n","3 Guitar Juggle\n","1 Guitar 2, Rest 1 Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","2 Juggle Longboard\n","2 Lift Longboard\n","2 Lift Longboard\n","2 Lift Plyometrics\n","3 Longboard 0 Plyometrics\n","2 Lift Plyometrics\n","2 Longboard Plyometrics\n","2 Mobility Plyometrics\n","1 Mobility 3.1 Plyometrics\n","1 Mobility 0.1 Plyometrics\n","1 Pre exercise test Plyometrics\n","1 Pre exercise test Plyometrics\n","1 Pre exercise test Run\n","1 Plyometrics 1 Run\n","1 Pre exercise test Run\n","1 Pre exercise test Run\n","1 Rest 0 Run\n","3 Rest 0 Rest 2\n","3 Rest 0 Rest 1\n","0 Rest 0 Rest 0\n","1 Rest 0 Read\n","1 Rest 0 Read\n","0 Rest 0 Rest 0\n","2 Rest 0 Skateboard basement\n","2 Relax Skateboard basement\n","2 Relax Skateboard basement\n","2 Rest 0 Skateboard basement\n","2 Relax Skateboard basement\n","2 Read Skateboard basement\n","2 Rest 0 Skateboard basement\n","2 Relax Skateboard basement\n","2 Read Skateboard basement\n","2 Skateboard outside Skateboard basement\n","1 Skateboard outside Sleep\n","1 Skateboard outside Sleep\n","1 Animation Coffee\n","1 Animation Coffee\n","0 Coffee Coffee\n","0 Coffee Coffee\n","0 Coffee Coffee\n","1 Coffee Cook\n","2 Coffee Computer\n","0 Coffee Coffee\n","0 Coffee Coffee\n","1 Coffee Cook\n","0 Coffee Coffee\n","1 Coffee Eat\n","1 Cook Eat\n","1 Cleaned room Eat\n","1 Cool down Eat\n","1 Core Eat\n","1 Drive Eat\n","1 Dynamic warmup Eat\n","1 Dynamic warmup Eat\n","1 Dynamic warmup Eat\n","1 Dynamic warmup Eat\n","1 Dynamic warmup Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","4 Eat 0 Eat\n","3 Eat 0 Eat 1\n","2 Eat 0 Guitar 1\n","2 Eat Guitar 1\n","2 Eat Guitar 1\n","3 Guitar 0 Guitar 1\n","0 Guitar 0 Guitar 0\n","3 Guitar 0 Guitar 1\n","0 Guitar 0 Guitar 0\n","3 Guitar 0 Guitar 1\n","3 Guitar 0 Guitar 1\n","3 Guitar 0 Guitar 1\n","0 Guitar 0 Guitar 0\n","2 Guitar 0 Guitar 2, Rest 1\n","4 Guitar 0 Guitar\n","2 Guitar 0 Guitar 2, Rest 1\n","4 Guitar 0 Guitar\n","2 Guitar 0 Guitar 2, Rest 1\n","4 Guitar 0 Guitar\n","2 Guitar 0 Guitar 2, Rest 1\n","4 Guitar 0 Guitar\n","2 Guitar 0 Guitar 2, Rest 1\n","4 Guitar 0 Guitar\n","2 Guitar 0 Guitar 2, Rest 1\n","1 Guitar 0 Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","3 Guitar Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","0 Juggle Juggle\n","2 Juggle Longboard\n","2 Lotion Longboard\n","2 Lotion Longboard\n","1 Lotion Lift\n","2 Lotion Longboard 0\n","1 Lotion Lift\n","2 Lotion Longboard\n","2 Lotion Mobility\n","2 Lift Mobility\n","4 Mobility 3.0 Mobility\n","3 Mobility 3.0 Mobility 3.1\n","3 Mobility 3.0 Mobility 0.1\n","1 Mobility 3.0 Plyometrics\n","1 Mobility 2.0 Plyometrics\n","1 Mobility 1.0 Plyometrics\n","1 Mobility 0.0 Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","2 Mobility Plyometrics\n","3 Ollie Notes Plyometrics\n","4 Plyometrics 0 Plyometrics\n","4 Plyometrics 0 Plyometrics\n","2 Plyometrics 0 Pre exercise test\n","3 Plyometrics 0 Plyometrics 1\n","2 Plyometrics 0 Pre exercise test\n","2 Plyometrics 0 Pre exercise test\n","1 Plyometrics 0 Run\n","1 Pre exercise test Run\n","1 Plyometrics Run\n","1 Plyometrics Run\n","1 Plyometrics Run\n","1 Rest 0 Run\n","3 Rest 0 Rest 2\n","3 Rest 0 Rest 1\n","0 Rest 0 Rest 0\n","1 Rest 0 Read\n","1 Rest 0 Read\n","0 Rest 0 Rest 0\n","0 Rest 0 Rest 0\n","1 Rest 0 Relax\n","1 Rest 0 Relax\n","0 Rest 0 Rest 0\n","1 Rest 0 Relax\n","1 Rest 0 Read\n","0 Rest 0 Rest 0\n","1 Rest 0 Relax\n","1 Rest 0 Read\n","2 Rest 0 Skateboard basement\n","2 Relax Skateboard basement\n","2 Read Skateboard basement\n","2 Read Skateboard basement\n","2 Read Skateboard basement\n","2 Rest Skateboard basement\n","2 Read Skateboard basement\n","2 Rest Skateboard basement\n","2 Read Skateboard basement\n","2 Read Skateboard basement\n","2 Read Skateboard basement\n","2 Rest Skateboard basement\n","2 Read Skateboard basement\n","2 Rugby Skateboard basement\n","2 Read Skateboard basement\n","2 Rest Skateboard basement\n","2 Rest Skateboard basement\n","2 Rest Skateboard basement\n","2 Run, walk Skateboard basement\n","2 Read Skateboard basement\n","2 Read Skateboard basement\n","2 Rest Skateboard basement\n","2 Run Skateboard basement\n","2 Rest Skateboard basement\n","2 Rest Skateboard basement\n","2 Run, walk Skateboard basement\n","2 Rest Skateboard basement\n","2 Rest Skateboard basement\n","2 RPI Firmware Skateboard basement\n","2 Skateboard outside Skateboard basement\n","1 Skateboard outside Sleep\n","1 Skateboard outside Sleep\n","0 Skateboard outside Skateboard outside\n","1 Skateboard outside Sleep\n","1 Skateboard outside Sleep\n","1 Skateboard outside Sleep\n","1 Skateboard outside Sleep\n","1 Skateboard outside Sleep\n","2 Skateboard outside Skateboard basement\n","1 Skateboard outside Sleep\n","1 Skateboard outside Tests\n","1 Skateboard outside Tests\n","1 Skateboard basement Tests\n","1 Shower Tests\n","1 Skateboard basement Tests\n","1 Skateboard outside Tests\n","1 Stretch Tests\n","1 Skateboard basement Tests\n","1 Stretch Tests\n","1 Stretch Tests\n","1 Skateboard outside Tests\n","1 Stretch Tests\n","1 Stretch Tests\n","1 Stretch Tests\n","1 Stretch Tests\n","1 Skateboard basement Tests\n","1 Stretch Tests\n","1 Skateboard basement Tests\n","1 Stretch Tests\n","1 Upperbody Tests\n","1 Upperbody Tests\n","1 Upperbody Walk\n","0 Walk Walk\n"]}]},{"cell_type":"code","source":["# a = [1, 2, 3, 4, 5]\n","# print(a[1:])\n","\n","\n"],"metadata":{"id":"6pQFdEQFs7F9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742421488052,"user_tz":300,"elapsed":13,"user":{"displayName":"David Leifer","userId":"06279506333224389759"}},"outputId":"348f8d71-72dd-452f-f590-aeb470682e13"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n","4\n"]}]},{"cell_type":"code","source":["my_array = [7, 3, 9, 12, 11]\n","\n","n = len(my_array)\n","for i in range(n-1):\n","    swapped = False\n","    for j in range(n-i-1):\n","        if my_array[j] > my_array[j+1]:\n","            my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n","            swapped = True\n","    if not swapped:\n","        break\n","\n","print(\"Sorted array:\", my_array)"],"metadata":{"id":"paYvybT55Xyv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742702766882,"user_tz":300,"elapsed":8,"user":{"displayName":"David Leifer","userId":"06279506333224389759"}},"outputId":"4f748ee9-692e-4346-a75f-0d6501cde82c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sorted array: [3, 7, 9, 11, 12]\n"]}]},{"cell_type":"code","source":["a = 'abcdefg'\n","for i in range(1,len(a)):\n","  print(a[:i])\n","  print(a[i])\n","  print('zzzzz')\n","\n","print(a[-1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nyadd2nCLeqQ","executionInfo":{"status":"ok","timestamp":1742741830911,"user_tz":300,"elapsed":9,"user":{"displayName":"David Leifer","userId":"06279506333224389759"}},"outputId":"56b66fbe-922a-4d93-f653-15d5d6016280"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["a\n","b\n","zzzzz\n","ab\n","c\n","zzzzz\n","abc\n","d\n","zzzzz\n","abcd\n","e\n","zzzzz\n","abcde\n","f\n","zzzzz\n","abcdef\n","g\n","zzzzz\n","g\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"evtj2cz2N7oY"},"execution_count":null,"outputs":[]}]}