{"cells":[{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":267,"status":"ok","timestamp":1750105896614,"user":{"displayName":"David Leifer","userId":"06279506333224389759"},"user_tz":300},"id":"IxtfVwAjhyaV","outputId":"762b0e99-9107-43fb-9d91-c134847dff7f"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Stm', 13, 3, 17, 5.67]\n","['Stm', 38, 3, 24, 8.0]\n","['Stm', 38, 5, 37, 7.4]\n","['Stm', 38, 7, 46, 6.57]\n","['Stm', 38, 10, 72, 7.2]\n","['Stm', 53, 3, 23, 7.67]\n","['Stm', 53, 5, 32, 6.4]\n","['Stm', 53, 7, 36, 5.14]\n","['Stm', 53, 10, 47, 4.7]\n","['Stm', 53, 30, 173, 5.77]\n","['Stm', 61, 3, 14, 4.67]\n","['Stm', 61, 5, 23, 4.6]\n","['Stm', 61, 7, 33, 4.71]\n","['Stm', 61, 10, 59, 5.9]\n","['Stm', 61, 30, 163, 5.43]\n","['Qua', 16, 3, 17, 5.67]\n","['Qua', 16, 5, 30, 6.0]\n","['Qua', 19, 3, 19, 6.33]\n","['Qua', 19, 5, 32, 6.4]\n","['Qua', 19, 7, 42, 6.0]\n","['But', 13, 3, 17, 5.67]\n","['Gro', 16, 3, 17, 5.67]\n","['Gro', 16, 5, 30, 6.0]\n","['Gro', 21, 3, 17, 5.67]\n","['Gro', 21, 5, 29, 5.8]\n","['Gro', 21, 7, 42, 6.0]\n","['Gro', 21, 10, 59, 5.9]\n","['Abs', 40, 3, 21, 7.0]\n","['Abs', 40, 5, 36, 7.2]\n","['Abs', 40, 7, 49, 7.0]\n","['Abs', 40, 10, 69, 6.9]\n","['Abs', 40, 30, 186, 6.2]\n","['Abs', 53, 3, 23, 7.67]\n","['Abs', 53, 5, 32, 6.4]\n","['Abs', 53, 7, 36, 5.14]\n","['Abs', 53, 10, 47, 4.7]\n","['Abs', 53, 30, 173, 5.77]\n","['Nec', 51, 3, 17, 5.67]\n","['Nec', 51, 5, 21, 4.2]\n","['Nec', 51, 7, 29, 4.14]\n","['Nec', 51, 10, 42, 4.2]\n","['Nec', 51, 30, 169, 5.63]\n","['Hea', 47, 3, 9, 3.0]\n","['Hea', 47, 5, 16, 3.2]\n","['Hea', 47, 7, 26, 3.71]\n","['Hea', 47, 10, 47, 4.7]\n","['Hea', 47, 30, 170, 5.67]\n","['Hea', 65, 3, 18, 6.0]\n","['Hea', 65, 5, 28, 5.6]\n","['Hea', 65, 7, 36, 5.14]\n","['Hea', 65, 10, 50, 5.0]\n","['Hea', 65, 30, 163, 5.43]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["def todo(self):\n","  # List of primary issues\n","  # todo    description                                   hours   progress      Note\n","  #\n","  # todo0   A01.csv skate, long, downhill, juggling,      83      Completed\n","  #         running mean duration by category.\n","  #\n","  # todo1   A01.csv category by day of the week or        .25     DNF           Hours are spread throughout the day.\n","  #         time of day i.e. morning, afternoon, night\n","  #         or blocks of 3.\n","  #\n","  # todo2   A01.csv nltk the 'Explanation' and 'Notes'                          Word frequency might be useful to find specific muscles.\n","  #         sections? Manual descriptions are already                           Topic analysis is included in 'Activity'. Sentiment analysis is\n","  #         included in the write-up.                                           redundant since 'Notes' is informational and not opinion.\n","  #\n","  # todo3   Another tutorial chapter on merge sort.               TODO\n","  #         Compare with Python's built-in len(),\n","  #         sort(), and replace().\n","  #\n","  # todo4   The graphing part could be included in        .25     DNF           This is a good project to learn syntax and documentation since it's visual.\n","  #         Chapter 1 with pandas and SciPy.\n","  #\n","  # todo5   A01.csv longboard and running distance.       .5      DNF           Running occured around 5 times and longboarding was recorded with time.\n","  #\n","  #\n","  # todo6   P0P1B0B1.csv timeseries graphing.             45.5    Completed\n","  #\n","  # todo7   P1.csv manual vs observed prediction          44.5    Processing    Graph reverse time. Wilcoxon statistical test to compare\n","  #         accuracy F1.                                                        frequency target mean with total mean. Graph prediction, observation with\n","  #                                                                             precision, recall, F1 score.\n","  #\n","  # todo8   B01.csv Pearson-Correlation and day-          2       Completed     Found that there was not correlation between parametric variables.\n","  #         delayed between calories, alcohol, exercise.                        An index similar to ENSO is redundant since there were no consecutive\n","  #                                                                             observations over 4 alcohol or excessive (calorie - calorie burned).\n","  #\n","  # todo9   A01P01B01 moving window spearman              .5      DNF           Would have to sort these for rank, which was completed in todo0.\n","  #         correlation between activity, duration,                             Square the difference between each numbers rank and sum all the numbers,\n","  #         time of day, pain, nutrients,                                       multiply by 6, divide by (number times (number squared minus one).\n","  #         calories, alcohol.                                                  1 - calculated number.\n","  #\n","  # todo10  tbd data filling and automatic predictions.   0       DNF\n","  #         idk if thats another chapter or avoided.\n","  #\n","  # todo11  Manual weather observations and PRISM data    0       DNF\n","  #         will be in a different GitHub to avoid\n","  #         confusion.\n","  #\n","  # Time spent at a computer programming\n","  # Total estimate  :\n","  # Total actual    :\n","  #\n","  # Purpose\n","  # The goal of writing this is to waste as much time as possible in between\n","  # exercise to avoid overtraining while retaining logical thought process\n","  # during long stretches of unemployment. These were written on a computer\n","  # with a 1.5-2 hour battery to restrict excessive\n","  # programming by limiting hardware access.\n","  #\n","  # Abstract\n","  # Python with C-like syntax is used for data manipulation and\n","  # graphing arrays are handled without dictionaries. The only\n","  # library used is Matplotlib for RGB graphing and to avoid writing a image or\n","  # video format that would likely spread misinformation. An implementation of\n","  # the merge sort algorithm was used to alphabetize exercise activity for\n","  # binning and graphing frequency by unique type. The built-in Python methods\n","  # for 'replace', 'split', 'len', and 'sort' were manually written for\n","  # learning purposes.\n","\n","  # Start date: 20250125\n","  # End date:\n","\n","  # Below is an exhaustive list of secondary issues.\n","\n","  # List of secondary issues\n","  # todo   description                                                  progress\n","  # todo0  rewrite parser for unicode csv str/int.\n","  # todo1  Stats class avoid NA, NAAN, -9999, etc.\n","  # todo2  refractor RGB_graphs.\n","  # todo3  monthly means on bar graphs.\n","  # todo4  organize merge_sort into another classe.                     Complete\n","  # todo5  modify merge sort to accept entire CSV.                      Class\n","  # todo6  Handle multi word activity descriptions consistently.        Class\n","  # todo7  switch the second capital letter to lower case if exists.    Class\n","  # todo8  unchain the four merge sort functions.                       Class\n","\n","  return\n","\n","# import sys\n","# for path in sys.path:\n","#   print(path)\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import exercise_module as eu\n","# eu.test_function()\n","# print(sys.version)\n","# 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]\n","# 3.11.11 (main, Dec  4 2024, 08:55:07) [GCC 11.4.0]\n","\n","# In development.\n","###############################################\n","# Part D: Data visualization with a RGB graph #\n","###############################################\n","# Matplotlib for color because otherwise you would have\n","# to write hardware code to avoid using Python or C libraries.\n","\n","class Graphs_rgb: # 'Graphs_rgb_dev()' in 'exercise_module.py'\n","  # Initialize the input variables\n","  def __init__(self, data):\n","    self.data = data\n","\n","  # Todo wilcoxon to compare means.\n","  def rgb_reverse_category(self,pain,not_pain,all_data):\n","\n","    x = [i[1] for i in pain]\n","    y1 = [j[0] for j in pain]\n","    y1n = [j[2] for j in pain]\n","\n","    y2 = [k[0] for k in not_pain]\n","    y2n = [k[2] for k in not_pain]\n","\n","    y3 = [l[0] for l in all_data]\n","    y3n = [l[2] for l in all_data]\n","\n","    plt.figure(figsize=(8, 6))\n","    plt.scatter(x, y1, label='Pain', marker='+')\n","    plt.scatter(x, y2, label='Not Pain', marker='_')\n","    plt.scatter(x, y3, label='All Data', marker='.')\n","    plt.xlabel('Days in Reverse', fontsize=10)\n","    plt.ylabel('Mean Daily Activities', fontsize=10)\n","    plt.title('Activites Before Pain',fontsize=12)\n","    for iter, mean in enumerate(y1):\n","      if mean > 6.5:\n","        bx_pos = x[iter] - 1.5\n","        by_pos = mean - .1\n","      else:\n","        bx_pos = x[iter] + 1.5\n","        by_pos = mean + .1\n","      box_str = 'N. ' + str(y1n[iter])\n","      plt.text(\n","          bx_pos,\n","          by_pos,\n","          box_str,\n","          ha=\"center\",\n","          va=\"bottom\",\n","          size=8,\n","          bbox=dict(facecolor=\"white\", edgecolor=\"black\", boxstyle=\"round\", alpha=0.75),\n","      )\n","    plt.xticks(x)\n","    plt.ylim(5.1,6.75)\n","    plt.grid()\n","    plt.margins(y=0.01)\n","    plt.legend(loc='upper left')\n","    plt.show()\n","\n","    # plt.savefig('P1-0 Activity Frequency Mean July-October, 2024' + '.jpg')\n","    return\n","\n","  # Prediction vs observation and accuracy, precision, F1 score.\n","  # Input is prediction, observation, date, classification scores.\n","  def rgb_prediction_observation(self,prediction,observation,date,classification_list):\n","    x = []\n","    y1 = []\n","    y2 = []\n","    y3 = []\n","    # Filter 'NA'.\n","    for j in range(1,len(prediction)):\n","      if len(date[j]) == 3:\n","        month = date[j][0:1]\n","        day = date[j][1:]\n","      else:\n","        month = date[j][0:2]\n","        day = date[j][2:]\n","      split_date = month + '/' + day\n","      if prediction[j] == 'NA' or observation[j] == 'NA':\n","        y1.append(None)\n","        y2.append(None)\n","        y3.append(None)\n","        x.append(split_date)\n","      else:\n","        if prediction[j] == observation[j]:\n","          #print(prediction[j],observation[j],date[j])\n","          y1.append(int(prediction[j]))\n","          y2.append(None)\n","          y3.append(None)\n","          x.append(split_date)\n","        else : # prediction[j] != observation[j]\n","          y1.append(None)\n","          y2.append(int(prediction[j]))\n","          y3.append(int(observation[j]))\n","          x.append(split_date)\n","\n","    plt.figure(figsize=(18, 6))\n","    plt.scatter(x, y1, label='Same', marker='.')\n","    plt.scatter(x, y2, label='Prediction', marker='o')\n","    plt.scatter(x, y3, label='Observation', marker='o')\n","    plt.ylim(0,6)\n","    x_label = [i for i in x[::5]]\n","    plt.xticks(x_label, fontsize=8)\n","    plt.xlabel('Date (2024)', fontsize=10)\n","    if prediction[0] == 'Stm':\n","      by_pos = .8\n","      plt.ylabel('Stamina', fontsize=10)\n","      plt.legend(loc='lower left',fontsize=8,borderaxespad=1.2)\n","    else:\n","      by_pos = 5.75\n","      plt.ylabel('Pain', fontsize=10)\n","      plt.title(classification_list[0])\n","      plt.legend(loc='upper left',fontsize=8,borderaxespad=1.2)\n","\n","    bx_pos = '10/26' # x[-1]\n","    box_label = ['','','Accuracy: ', 'Precision: ', 'Recall: ', 'F1 Score: ']\n","    box_str = ''\n","    for k in range(2,len(classification_list)):\n","      box_subset_str = box_label[k] + str(round(classification_list[k],2))\n","      if k < len(classification_list) - 1:\n","        box_str += box_subset_str + '\\n'\n","      else:\n","        box_str += box_subset_str\n","\n","    plt.text(\n","        bx_pos,\n","        by_pos,\n","        box_str,\n","        ha=\"left\",\n","        va=\"top\",\n","        size=8,\n","        bbox=dict(facecolor=\"white\", edgecolor=\"grey\", boxstyle=\"round,pad=0.5\", alpha=0.5))\n","    plt.grid()\n","    plt.margins(y=0.01)\n","    return\n","\n","  def rgb_reverse_day_mean(self,input_data,P1_data):\n","    x = [i[1] for i in input_data]\n","    y = [j[4] for j in input_data]\n","\n","    # Return the date\n","    x = []\n","    for k in range(len(input_data)):\n","      splice = input_data[k][1] + 1\n","      x.append(P1_data[1][splice])\n","      #print(x[k], y[k], input_data[k])\n","\n","    plt.figure(figsize=(8,6))\n","    plt.scatter(x, y)\n","    # plt.scatter(x, y2, label='Prediction', marker='o')\n","    # plt.scatter(x, y3, label='Observation', marker='o')\n","    # plt.ylim(0,6)\n","\n","    ''' todo: category graphs\n","    dm = 'Day_ID' mean for [3,5,7...n]\n","\n","     |\n","     |             dm\n","     |     dm                                   n\n","     |                       dm      dm\n","     |___________________________________\n","        'Stm'13  'Qua'38  'etc'53  'etc'61  ... n\n","    '''\n","    return\n","\n","# In development.\n","#################################################\n","# Part E: Part D visualization helper functions #\n","#################################################\n","# Merge sort is the fastest for worst case scenario sorting: N log(n)\n","# Implementation is from W3 and modified for AZ with ascii ord():\n","# https://www.w3schools.com/dsa/dsa_algo_mergesort.php\n","# Bubble sort is the fastest for almost sorted lists O(n)\n","# https://www.w3schools.com/dsa/dsa_timecomplexity_bblsort.php\n","# Python's built-in sort() function uses Tim Sort which uses a hybrid\n","# Insertion and Merge. Insertion is similar to Bubble with the same\n","# Time and Space complexity with worst case O(n^2) and best O(n).\n","class Graphs_sort:\n","  # Initialize the input variables\n","  def __init__(self, data):\n","    self.data = data\n","\n","  # Returns the abnormal pain entry.\n","  def erroneous_values(self,P1_vert_column):\n","    erroneous_values = [[P1_vert_column[0],'NA']]\n","    non_erroneous_values = [[P1_vert_column[0],'NA']]\n","    all_values = [[P1_vert_column[0],'NA']]\n","    for i in range(len(P1_vert_column)):\n","      if len(P1_vert_column[i]) > 1:\n","        continue\n","      # Append all values to calculate overall mean.\n","      all_values.append([P1_vert_column[i], i-1])\n","      # Not stamina and greater than 4 pain values and 'Day_ID' get sent\n","      # to the list of lists.\n","      if P1_vert_column[0] != 'Stm' and int(P1_vert_column[i]) > 3:\n","        erroneous_values.append([P1_vert_column[i], i-1])\n","      # If it is stamina, check for values 2 and less.\n","      elif P1_vert_column[0] == 'Stm' and int(P1_vert_column[i]) < 3:\n","        erroneous_values.append([P1_vert_column[i], i-1])\n","      else:\n","        # Otherwise it is a normal value.\n","        non_erroneous_values.append([P1_vert_column[i], i-1])\n","    return [erroneous_values,non_erroneous_values,all_values]\n","\n","  # Calculates the activity frequency for each day in ~ 500 iterations.\n","  # Returns 'Day_ID', 'start', and 'end' for splicing in 'activity_reverse()'.\n","  def activity_frequency_splice(self):\n","    # Skips the first ten values, 'Day_ID' is '10' in P1.csv and\n","    # 'start' is the 'Time_ID' in A1.tsv. The first 10 days are discarded\n","    # because they are why the information was collected.\n","    start = 53\n","    activity_frequency = []\n","    # The 'data' is from the function's class and needs a boilerplate\n","    # value appended to return the entire length of the 'data' list.\n","    data = self.data[0]\n","    data.append('100')\n","    for i in range(start,len(data)):\n","      # Checks 'Day_ID' P1.csv against 'Time_ID' from A1.tsv.\n","      # If 'Day_ID' is not '' or the values in A1.tsv,\n","      # they must by an integer (as long as the first value\n","      # header 'Day_ID' is ignored).\n","      if len(data[i]) > 0:\n","        day_id = int(data[i])\n","        activity_frequency.append([day_id-1, start, i])\n","        # 'start' is set to the 'i' or the iterator, which resumes checking\n","        # the length of A1.tsv.\n","        start = i\n","    # Deletes the null first value.\n","    del activity_frequency[0]\n","    return activity_frequency\n","\n","  # Function to find the number of activities [30,10,7,5,3] and\n","  # returns the ['Category', 'Day_ID', 'Number of Days', 'Activity Frequency', 'Frequency per Day']\n","  def activity_reverse(self,day_id,activity_frequency):\n","    counter = 0\n","    known_ID = int(day_id[2][1])\n","    activity_reverse = []\n","    for i in range(len(day_id)):\n","      if type(day_id[i][1]) == str:\n","        category = day_id[i][0] # the category\n","      elif type(day_id[i][1]) == int:\n","        if day_id[i][1] > 9:\n","          # The number of days in reverse.\n","          reverse_days = [3,5,7,10,30]\n","          # 'Day_ID' ignores the first 10 days by subtracting 10 from 'start' and 'end'.\n","          # activity_by_category = []\n","          for k in range(len(reverse_days)):\n","            # 'end' is set to the 'Day_ID' when calculating the first reverse day '3'\n","            # Otherwise, it is a subtracted 'known_ID' that is the previous 'start' value below.\n","            if reverse_days[k] == 3:\n","              end = day_id[i][1]\n","            else:\n","              end = known_ID\n","            start = day_id[i][1] - reverse_days[k]\n","            # print('start: ', start, ' = ', day_id[i][1], ' - ', reverse_days[k])\n","            # print('end: ', end)\n","            # Avoids calculating frequencies for the first 10 days.\n","            if start > 9:\n","              # The number of activities 'reverse_days[k]' from the pain observation.\n","              activity_total = 0\n","              for j in range(start-10,end-10):\n","                # Summation for the number of activities, 'reverse_days' (k) from pain observation.\n","                activity_difference = activity_frequency[j][2] - activity_frequency[j][1]\n","                # print('Activity calculating : ', activity_difference, ' = ', activity_frequency[j][2], ' - ', activity_frequency[j][1])\n","                activity_total += activity_difference\n","                counter += 1\n","              # 'known_ID' is used to avoid calculating frequencies that are already known\n","              # by using the previous start to avoid duplicated iterations.\n","              known_ID = start\n","              # If 'k' is greater than '0', the previous day range frequency difference\n","              # was already calcualted and is used to calculate the frequency, reducing\n","              # unnecessary iterations. If 'reverse_days[k]' is '5' the frequency is already\n","              # known for '3', the difference for days '4' and '5' are calculated and added\n","              # onto 'activity_previous'.\n","              if k > 0:\n","                activity_previous = activity_intermediate + activity_total\n","              else:\n","                activity_previous = activity_total\n","              # The previous total is held for the next iteration.\n","              # print('Activity Total = ', activity_previous)\n","              activity_intermediate = activity_previous\n","              # Calculate the 'Activity Frequency' and 'Days' to get the the average of each day.\n","              activity_day_mean = round(activity_previous / reverse_days[k],2)\n","              activity_reverse.append([category,day_id[i][1],reverse_days[k],activity_previous,activity_day_mean])\n","          # print(category,day_id[i][1],reverse_days[k],activity_previous)\n","          if i+1 == len(day_id):\n","            break\n","          # known_ID = day_id[i+1][1]\n","          # Avoids when the only 'reverse_days[k]' is '30' and is the only\n","          # 'start' that's less than '9'. [3,5,7,10] have already been\n","          # calculated.\n","          #if known_ID == 'NA':\n","          #  known_ID = day_id[i+2][1]\n","          #print('known ID: ', known_ID)\n","    # print(counter) # ~472 iterations without skips or 250 with skipping already calculated differences.\n","    for iter in activity_reverse:\n","      print(iter)\n","    return activity_reverse\n","\n","  # Function to find the mean for each day group [3,5,7,10,30] mean.\n","  def activity_group_mean(self,input_data):\n","    group_day = [3,5,7,10,30]\n","    group_mean_list = []\n","\n","    for i in range(len(group_day)):\n","      group_sum = 0\n","      group_count = 0\n","      for j in range(len(input_data)):\n","        # When the 'group_day' is the same as the group day value in\n","        # the 'activity_frequency' as calculate by 'Day_ID', that '3' '5', etc\n","        # group sum and count is incremented by the frequency and count respectively.\n","        if group_day[i] == input_data[j][2]:\n","          group_sum += input_data[j][4]\n","          group_count += 1\n","      # Once all the '3', '5', or ... n is summized, that group day's mean is calculated.\n","      # Subtract one because there's an extra '0' value appended from 'activity_day_mean()'.\n","      group_mean = group_sum / (group_count - 1)\n","      group_mean_list.append([round(group_mean,2),group_day[i],group_count])\n","\n","    return group_mean_list\n","\n","#################################################\n","# Part F: Non-parametric Classification Metrics #\n","#################################################\n","# Inputs are observations and prediction columns.\n","# Assumes input has a header.\n","class classification_metrics:\n","  # true_positive  = true_positive   1  (true_positive 1 / true_positive 1 + fn4) or recall\n","  # true_negative  = true_negative   0  (true_negative 0 / true_negative 0 + false_positive 3)\n","  # false_positive = false_positive  3  predicted soreness, was not sore.\n","  #                                     false positive rate = false_positive 3 / false_positive 3 + true_negative 0\n","  # false_negative = false_negative  4  predicted not soreness, was sore\n","  # https://www.geeksforgeeks.org/metrics-for-machine-learning-model/#regression-evaluation-metrics\n","  # https://developers.google.com/machine-learning/crash-course/classification/accuracy-precision-recall\n","  '''\n","  print(P1_vert[0])\n","  print(P1_vert[1])\n","  print(P1_vert[2])\n","  # 0 6 7 8\n","  print(A1_vert[0]) # Day_ID\n","  print(A1_vert[6]) # Activity\n","  # print(A1_vert[7]) # Notes\n","  # print(A1_vert[8]) # Explaination\n","  '''\n","  def __init__(self,observations,predictions):\n","    # The input scale is 5-1 high pain to low pain (or stamina).\n","    # The original data was 1-5 high pain to low pain and was flipped\n","    # since it was confusing (except for stamina).\n","    self.observations = observations\n","    self.predictions = predictions\n","\n","  def binary_classification(self):\n","    # Returns 0 (True Negative) 1 (True Positive) if prediction\n","    # matches observation. False Positive when prediction was soreness\n","    # and observation was no soreness (3). False Negative when the prediction\n","    # was no soreness and there was soreness (4).\n","    # Also returns the count for the classifications.\n","    true_negative = 0\n","    true_positive = 0\n","    false_positive = 0\n","    false_negative = 0\n","    binary = []\n","    for i in range(1,len(self.observations)):\n","      if self.observations[i] == self.predictions[i]:\n","        result = 1\n","        true_positive += 1\n","      else:\n","        if self.predictions[i] == 'NA' or self.observations[i] == 'NA':\n","          result = 0\n","        # False positive predicted 4 or 5 (high soreness) and was 1,2,3.\n","        elif int(self.predictions[i]) > 3 and int(self.observations[i]) <= 3:\n","          result = 3\n","          false_positive += 1\n","        # False negative predicted 1,2,3 (low soreness) and was 4 or 5.\n","        elif int(self.predictions[i]) <= 3 and int(self.observations[i]) > 3:\n","          result = 4\n","          false_negative += 1\n","        else:\n","          result = 0\n","          true_negative += 1\n","      binary.append(result)\n","    return [binary,true_negative,true_positive,false_positive,false_negative]\n","\n","  def accuracy(self,binary):\n","    # Number of correct predictions / total, input is False/True 0/1.\n","    count = 0\n","    for i in binary:\n","      if i == 1:\n","        count += 1\n","    total = len(binary)\n","    result = count / total\n","    return result\n","\n","  def precision(self,true_positive,false_positive):\n","    # precision = true_positive 1 / (true_positive 1 + false_positive 3)\n","    result = true_positive / (true_positive + false_positive)\n","    return result\n","\n","  def recall(self,true_positive,false_negative):\n","    # (true_positive / true_positive + false_negative 4) or recall\n","    result = true_positive / (true_positive + false_negative)\n","    return result\n","\n","  def f1_score(self,true_positive,false_positive,false_negative):\n","    # 2 * (precision * recall) / (precision + recall)\n","    # (2 true_positive) / (2 true_positive + false_positive 3 + false_negative)\n","    result = (2 * true_positive) / ((2*true_positive) + false_positive + false_negative)\n","    return result\n","\n","  # After the previous n (10,7,5,3) days of activity frequency, use the non parametric\n","  # Wilcoxon's rank sum test to compare the two dependent or paired samples. The two\n","  # samples being compared are n days activity frequency with the entire dataset's activity\n","  # frequency. It is non-parametric because it is categorical or ordinal dataset and\n","  # not real world measurements, despite having over 30 observations.\n","  # https://www.stat.purdue.edu/~tqin/system101/method/method_wilcoxon_rank_sum_sas.htm\n","  # https://pmc.ncbi.nlm.nih.gov/articles/PMC4754273/\n","  def wilcoxon_rank_sum(self):\n","    return\n","\n","##############################################################################\n","# Part Z: Run the functions                                                  #\n","##############################################################################\n","\n","# Part A: The path of the CSV to be parsed\n","def CSV_running(path,unflipped_col):\n","  # Create the CSV_Parser class object and open the files\n","  parser = eu.CSV_Parser(path)\n","  read = parser.file_opener()\n","  # Index the comma position from the CSV and split the characters into their values\n","  comma_indexed = parser.comma_index(read, path, 0)\n","  # Get the width of columns of the commas\n","  comma_width = parser.comma_index(read, path, 1)\n","  # Sort the list into verticle columns\n","  # The P0 csv gets flipped, except for the Stm column\n","  # Divide by two - the list of comma places is doubled for the start/end value\n","  col_width = int(((comma_width - 1 ) / 2) - 1)\n","  vert = []\n","  for i in range(0,comma_width-1,2):\n","    value_list = parser.csv_value_list(comma_indexed, read, col_width, i)\n","    if unflipped_col == 0:\n","      vert.append(value_list)\n","    else:\n","      if value_list[0] in unflipped_col:\n","        vert.append(value_list)\n","      else:\n","        flip = parser.csv_flipper(value_list, col_width)\n","        vert.append(flip)\n","  return vert\n","\n","# Part F: Predictions vs Observed pain values using classification metrics.\n","def P1_Classification_RGB_graph(P1_vert,P1_vert_predictions):\n","\n","  # B1.csv - Nutrition - binary calories high and low -> above/below 2500\n","  # - Mean number of activities per day over 3-14 days\n","  #     - Exclude 09/09-09/13 since it was recorded with excessive detail.\n","  # - Not stretching in the one or two days afterward.\n","  # - Stretching too frequently in the one or two days afterward.\n","\n","  # Days of Interest :\n","  # Stamina for 08/27-0903 (value 4) except 08/29 (value 2) and abs (4) on 08/31.\n","      # Stamina for 09/13. Exclude 09/09-09/13 since it was recorded with excessive detail.\n","  # Stamina for 09/19-09/22 (value 4) except 09/21 (value 2).\n","  # The goal is to find an appropriate balance for exercise and not moving\n","  # by examining the frequency of Activities before these decreases.\n","\n","  # 'Day_ID' remove 49-53 for average graphing because they were recorded\n","  # differently and induce outliers. ['909','910','911','912','913']\n","  for P1 in range(len(P1_vert_predictions)):\n","    del P1_vert_predictions[P1][50:55]\n","    del P1_vert[P1][50:55]\n","  # Remove these dates: ['909','910','911','912','913']\n","  # in A1_vert[0], A1_vert[3]\n","  del A1_vert[0][271:326]\n","  del A1_vert[3][271:326]\n","  # Accuracy, Precision, Recall, F1\n","  # Uses F1 since RMSE is for regression prediction models. The pain scale\n","  # is numerical and is equivilent to nominal categories.\n","  title_full = ['','','',\n","  'Stamina',\n","  'Feet','Ankle','Calves',\n","  'Knees','Quadriceps','Gluteus','Groin',\n","  'Abdominals','Lower Back',\n","  'Latissimus Dorsi','Trapezius','Shoulders',\n","  'Chest','Triceps','Biceps',\n","  'Neck','Head']\n","  # todo classification_metrics\n","  # wilcoxon_rank_sum\n","  for i in range(3,len(P1_vert)):\n","    '''\n","    print('Pain Scale')\n","    print(P1_vert[i])\n","    print('Classification')\n","    class_met = classification_metrics(P1_vert[i],P1_vert_predictions[i])\n","    binary = class_met.binary_classification()\n","    print(binary[0])\n","    print()\n","    # i is the pain scale 'Day_ID' (1-101) for A1 (1-350ish) 'did'\n","    print(A1_vert[0]) # 'Day_ID\n","    print(A1_vert[1])\n","    print(A1_vert[6]) # 'Activity'\n","    print()\n","    '''\n","\n","    A1_graphs_sort = eu.Graphs_sort(A1_vert)\n","    A1_filter = A1_graphs_sort.filter_stop(A1_graphs_sort.data[6])\n","\n","    '''\n","    A1_graphs_sort = Graphs_sort(data)\n","    A1_graphs_sort.filter_stop(A1_graphs_sort.data[])\n","    acc_binary = class_met.accuracy(binary[0])\n","    # header : print(P1_vert[i][0])\n","    print('Accuracy', ' = ', acc_binary)\n","    precision_binary = class_met.precision(binary[2],binary[3]) # tsp fp\n","    print('Precision', ' = ', precision_binary)\n","    print('tsp', ' ', binary[2])\n","    print('fp', ' ', binary[3])\n","    print()\n","    recall_binary = class_met.recall(binary[2],binary[4]) # tsp fn\n","    print('Recall', ' = ', recall_binary)\n","    print('tsp', ' ', binary[2])\n","    print('fp', ' ', binary[3])\n","    print()\n","    f1_score_binary = class_met.f1_score(binary[2],binary[3],binary[4]) # tsp fp fn\n","    print('F1 Score', ' = ', f1_score_binary)\n","    print('tsp', ' ', binary[2])\n","    print('fp', ' ', binary[3])\n","    print('fn', ' ', binary[4])\n","    print()\n","    print()\n","    print()\n","    '''\n","\n","  return\n","\n","def A1_daily_RGB_graph(P1_vert,P1_vert_predictions,A1_vert):\n","  # Edited five days to remove overly detailed entries called 'A1-small.csv'\n","  # original is 'A1.csv' - ['909','910','911','912','913']\n","\n","  A1_Graphs_sort = Graphs_sort(A1_vert)\n","  days_pain = []\n","  days_not_pain = []\n","  all_days = []\n","  # Loop returns the bodily part, number of days, and erroneous pain or\n","  # stamina values start and end from the erroneous observation minus\n","  # number of days. Also returns the days that were not a pain.\n","  for i in P1_vert[3:]:\n","    reverse_days = A1_Graphs_sort.erroneous_values(i)\n","    if len(reverse_days[0]) > 2:\n","      days_pain += reverse_days[0]\n","      days_not_pain += reverse_days[1]\n","      all_days += reverse_days[2]\n","\n","  # Returns the frequency of activities for every day (discards the first 10).\n","  A1_activity_splice = A1_Graphs_sort.activity_frequency_splice()\n","  A1_activity_pain = A1_Graphs_sort.activity_reverse(days_pain,A1_activity_splice)\n","  #A1_activity_not_pain = A1_Graphs_sort.activity_reverse(days_not_pain,A1_activity_splice)\n","  #A1_activity_all = A1_Graphs_sort.activity_reverse(all_days,A1_activity_splice)\n","\n","  # Calcualtes the mean for each reverse day means, then graph '3' on x with the sum\n","  # of the erroneous means divided by their count on the y against non pain\n","  # means and all the days mean. 'y' is labeled 'Activity Frequency'.\n","  #A1_pain_group_mean = A1_Graphs_sort.activity_group_mean(A1_activity_pain)\n","  #A1_not_pain_group_mean = A1_Graphs_sort.activity_group_mean(A1_activity_not_pain)\n","  #A1_all_group_mean = A1_Graphs_sort.activity_group_mean(A1_activity_all)\n","\n","  # Graphing section.\n","  # Summarized pain, not pain, and all data means for 3,5,7,10,and 30 days before the event.\n","  A1_graph_rgb = Graphs_rgb([])\n","  # A1_reverse_mean_category = A1_graph_rgb.rgb_reverse_category(A1_pain_group_mean,A1_not_pain_group_mean,A1_all_group_mean)\n","\n","  # Mean of every reverse splice for each day.\n","  A1_day_mean_category = A1_graph_rgb.rgb_reverse_day_mean(A1_activity_pain,P1_vert_predictions)\n","\n","  # Graphing the prediction and observation along with classification metrics.\n","  # Usage is from 'P1_Classification_RGB_graph()'\n","  title_full = [#'','','',\n","  'Stamina',\n","  'Feet','Ankle','Calves',\n","  'Knees','Quadriceps','Gluteus','Groin',\n","  'Abdominals','Lower Back',\n","  'Latissimus Dorsi','Trapezius','Shoulders',\n","  'Chest','Triceps','Biceps',\n","  'Neck','Head']\n","  for j in range(3,len(P1_vert_predictions)):\n","    class_met = classification_metrics(P1_vert[j],P1_vert_predictions[j])\n","    binary = class_met.binary_classification()\n","    acc_binary = class_met.accuracy(binary[0])\n","    precision_binary = class_met.precision(binary[2],binary[3]) # tsp fp\n","    recall_binary = class_met.recall(binary[2],binary[4]) # tsp fn\n","    f1_score_binary = class_met.f1_score(binary[2],binary[3],binary[4]) # tsp fp fn\n","    classification_list = [title_full[j-3],P1_vert[j][0],acc_binary,precision_binary,recall_binary,f1_score_binary]\n","    # P1_graph_rgb = Graphs_rgb([])\n","    # P1_graph_rgb.rgb_prediction_observation(P1_vert_predictions[j],P1_vert[j],P1_vert_predictions[1],classification_list)\n","  return\n","\n","# One month of May, 2024 observations\n","P0_path = \"/content/P0.csv\"\n","B0_path = \"/content/B0.csv\"\n","# A0 is a TSV because there are blank cells\n","A0_path = \"/content/A0.tsv\"\n","P0_unflipped_col = ['ID','Date','Day','Stm']\n","# P0_vert = CSV_running(P0_path,P0_unflipped_col)\n","# B0_vert = CSV_running(B0_path,0)\n","# A0_vert = CSV_running(A0_path,0)\n","# Four months of July-October observations\n","# P1.csv contains the pain scale and B1.csv contains the food records\n","P1_path = \"/content/P1-Observations-PaperFigures.csv\"\n","P1_path_predictions = \"/content/P1-Prediction-PaperFigures.csv\"\n","# B1_path = \"/content/B1.csv\"\n","# A1 is a tsv because of blank cells\n","# A1_path = \"/content/A1.tsv\" # The full dataset.\n","A1_path = \"/content/A1-small.tsv\"\n","# List of columns to not be flipepd\n","P1_unflipped_col = ['ID','Date','Day','Stm','Notes','Notes2']\n","P1_vert = CSV_running(P1_path,P1_unflipped_col)\n","P1_vert_predictions = CSV_running(P1_path_predictions,P1_unflipped_col)\n","# B1_vert = CSV_running(B1_path,0)\n","A1_vert = CSV_running(A1_path,0)\n","\n","# P1_RGB_graph(P1_vert)\n","# B1_RGB_graph(B1_vert)\n","# A0_RGB_graph(A0_vert)\n","# A1_RGB_graph(A1_vert)\n","# P1_Classification_RGB_graph(P1_vert,P1_vert_predictions)\n","A1_daily_RGB_graph(P1_vert,P1_vert_predictions,A1_vert)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1749480169036,"user":{"displayName":"David Leifer","userId":"06279506333224389759"},"user_tz":300},"id":"nyadd2nCLeqQ","outputId":"a002dbcf-d792-4966-9e49-b2f262e8c999"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"\\nfor i in range(1,len(a)):\\n  print(a[:i])\\n  print(a[i])\\n  print('zzzzz')\\n\\n  print(a[-1])\""]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["######|### |a = 'abcdefg'\n","'''\n","for i in range(1,len(a)):\n","  print(a[:i])\n","  print(a[i])\n","  print('zzzzz')\n","\n","  print(a[-1])'''"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1744137032714,"user":{"displayName":"David Leifer","userId":"06279506333224389759"},"user_tz":300},"id":"SLyAYj_xtzdg","outputId":"3bb4744a-366f-4183-a0ca-7f695d31af9e"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[[1], ['b']]]\n"]}],"source":["abc = [\n","        [[0], ['a']],\n","        [[1], ['b']],\n","        [[2], ['c']],\n","        [[3], ['d']],\n","        [[4], ['e']],\n","        [[5], ['f']],\n","        [[6], ['g']],\n","        [[7], ['h']],\n","        [[8], ['i']],\n","        [[9], ['j']],\n","                      ]\n","# for i in range(10):\n","print(abc[1:2])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1744769169351,"user":{"displayName":"David Leifer","userId":"06279506333224389759"},"user_tz":300},"id":"kti4uK-eVPeZ","outputId":"1c1bc210-f9b0-4b10-b49e-62551d97b986"},"outputs":[{"name":"stdout","output_type":"stream","text":["34\n","5\n"]}],"source":["a = '1234'\n","b = '567'\n","c = '89'\n","\n","\n","if len(a) == 4:\n","  end_sub = a[2:]\n","  print(end_sub)\n","\n","if len(b) == 3:\n","  end_sub = b[:1]\n","  print(end_sub)\n","\n","if len(c) == 2:\n","  end_sub = c"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bNU5wcEd0AeC"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6wounMFJaZT3"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1fHIWbrpk4NMYcse3Xdkb-S8XiS2pxzJm","timestamp":1721260308720},{"file_id":"1STKhtVVaknUZiohwWLdfyoZ3zg6Veimx","timestamp":1721260179755}],"authorship_tag":"ABX9TyMu1bnRHtzGxtmQ+CyhZcP1"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}